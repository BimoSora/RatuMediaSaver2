"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetEntity = exports.ResultGetEntity = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var MigrateTo_1 = require("../../Utils/MigrateTo");
var BannedRight_1 = require("../../Utils/BannedRight");
var ChatPhoto_1 = require("../../Utils/ChatPhoto");
var RestrictionReason_1 = require("../../Utils/RestrictionReason");
var AdminRights_1 = require("../../Utils/AdminRights");
var telegram_1 = require("telegram");
var big_integer_1 = require("big-integer");
var ToBigInt_1 = require("../../Utils/ToBigInt");
var Error_1 = __importDefault(require("../../Context/Error"));
var ResultGetEntity = /** @class */ (function () {
    function ResultGetEntity(resultsGetEntity) {
        if (resultsGetEntity instanceof telegram_1.Api.User) {
            resultsGetEntity;
            this.type = 'user';
            this.self = resultsGetEntity.self;
            this.contact = resultsGetEntity.contact;
            this.mutualContact = resultsGetEntity.mutualContact;
            this.deleted = resultsGetEntity.deleted;
            this.bot = resultsGetEntity.bot;
            this.botChatHistory = resultsGetEntity.botChatHistory;
            this.botNochats = resultsGetEntity.botNochats;
            this.verified = resultsGetEntity.verified;
            this.restricted = resultsGetEntity.restricted;
            this.min = resultsGetEntity.min;
            this.botInlineGeo = resultsGetEntity.botInlineGeo;
            this.support = resultsGetEntity.support;
            this.scam = resultsGetEntity.scam;
            this.applyMinPhoto = resultsGetEntity.applyMinPhoto;
            this.fake = resultsGetEntity.fake;
            if ((0, big_integer_1.isInstance)(resultsGetEntity.id)) {
                //@ts-ignore
                this.id = BigInt((0, ToBigInt_1.toString)(resultsGetEntity.id));
            }
            else {
                //@ts-ignore
                this.id = BigInt(resultsGetEntity.id);
            }
            this.accessHash = BigInt((0, ToBigInt_1.toString)(resultsGetEntity.accessHash));
            this.firstName = resultsGetEntity.firstName;
            this.lastName = resultsGetEntity.lastName;
            this.username = resultsGetEntity.username;
            this.phone = resultsGetEntity.phone;
            this.botInfoVersion = resultsGetEntity.botInfoVersion;
            this.botInlinePlaceholder = resultsGetEntity.botInlinePlaceholder;
            this.langCode = resultsGetEntity.langCode;
            if (resultsGetEntity.status) {
                switch (resultsGetEntity.status.className) {
                    case 'UserStatusOnline':
                        this.status = 'online';
                        break;
                    case 'UserStatusOffline':
                        this.status = 'offline';
                        break;
                    case 'UserStatusRecently':
                        this.status = 'recently';
                        break;
                    case 'UserStatusLastWeek':
                        this.status = 'withinWeek';
                        break;
                    case 'UserStatusLastMonth':
                        this.status = 'withinMonth';
                        break;
                    default:
                        this.status = 'longTimeAgo';
                }
            }
            if (resultsGetEntity.restrictionReason) {
                var temp = [];
                for (var i = 0; i < resultsGetEntity.restrictionReason.length; i++) {
                    temp.push(new RestrictionReason_1.RestrictionReason(resultsGetEntity.restrictionReason[i]));
                }
                this.restrictionReason = temp;
            }
            if (resultsGetEntity.photo instanceof telegram_1.Api.UserProfilePhoto) {
                resultsGetEntity.photo;
                this.photo = new ChatPhoto_1.ChatPhoto(resultsGetEntity.photo, this);
                this.dcId = resultsGetEntity.photo.dcId;
            }
        }
        if (resultsGetEntity instanceof telegram_1.Api.Chat) {
            resultsGetEntity;
            this.type = 'chat';
            this.creator = resultsGetEntity.creator;
            this.kicked = resultsGetEntity.kicked;
            this.left = resultsGetEntity.left;
            this.deactivated = resultsGetEntity.deactivated;
            this.callActive = resultsGetEntity.callActive;
            this.callNotEmpty = resultsGetEntity.callNotEmpty;
            this.noforward = resultsGetEntity.noforwards;
            if ((0, big_integer_1.isInstance)(resultsGetEntity.id)) {
                //@ts-ignore
                this.id = BigInt("-".concat((0, ToBigInt_1.toString)(resultsGetEntity.id)));
            }
            else {
                //@ts-ignore
                this.id = BigInt("-".concat(resultsGetEntity.id));
            }
            this.title = resultsGetEntity.title;
            this.participantsCount = resultsGetEntity.participantsCount;
            this.version = resultsGetEntity.version;
            if (resultsGetEntity.migratedTo instanceof telegram_1.Api.InputChannel) {
                this.migratedTo = new MigrateTo_1.MigrateTo(resultsGetEntity.migratedTo);
            }
            if (resultsGetEntity.adminRights instanceof telegram_1.Api.ChatAdminRights) {
                this.adminRights = new AdminRights_1.AdminRights(resultsGetEntity.adminRights);
            }
            if (resultsGetEntity.defaultBannedRights instanceof telegram_1.Api.ChatBannedRights) {
                this.defaultBannedRights = new BannedRight_1.BannedRights(resultsGetEntity.defaultBannedRights);
            }
            if (resultsGetEntity.photo instanceof telegram_1.Api.ChatPhoto) {
                resultsGetEntity.photo;
                this.photo = new ChatPhoto_1.ChatPhoto(resultsGetEntity.photo, this);
                this.dcId = resultsGetEntity.photo.dcId;
            }
        }
        if (resultsGetEntity instanceof telegram_1.Api.Channel) {
            resultsGetEntity;
            this.type = resultsGetEntity.megagroup ? 'supergroup' : 'channel';
            this.creator = resultsGetEntity.creator;
            this.left = resultsGetEntity.left;
            this.broadcast = resultsGetEntity.broadcast;
            this.verified = resultsGetEntity.verified;
            this.megagroup = resultsGetEntity.megagroup;
            this.restricted = resultsGetEntity.restricted;
            this.signatures = resultsGetEntity.signatures;
            this.min = resultsGetEntity.min;
            this.scam = resultsGetEntity.scam;
            this.hasLink = resultsGetEntity.hasLink;
            this.hasGeo = resultsGetEntity.hasGeo;
            this.slowmodeEnabled = resultsGetEntity.slowmodeEnabled;
            this.callActive = resultsGetEntity.callActive;
            this.callNotEmpty = resultsGetEntity.callNotEmpty;
            this.fake = resultsGetEntity.fake;
            this.gigagroup = resultsGetEntity.gigagroup;
            this.noforward = resultsGetEntity.noforwards;
            if ((0, big_integer_1.isInstance)(resultsGetEntity.id)) {
                //@ts-ignore
                this.id = BigInt("-100".concat((0, ToBigInt_1.toString)(resultsGetEntity.id)));
            }
            else {
                //@ts-ignore
                this.id = BigInt("-100".concat(resultsGetEntity.id));
            }
            this.accessHash = BigInt((0, ToBigInt_1.toString)(resultsGetEntity.accessHash));
            this.title = resultsGetEntity.title;
            this.username = resultsGetEntity.username;
            if (resultsGetEntity.adminRights instanceof telegram_1.Api.ChatAdminRights) {
                this.adminRights = new AdminRights_1.AdminRights(resultsGetEntity.adminRights);
            }
            if (resultsGetEntity.bannedRights instanceof telegram_1.Api.ChatBannedRights) {
                this.bannedRights = new BannedRight_1.BannedRights(resultsGetEntity.bannedRights);
            }
            if (resultsGetEntity.defaultBannedRights instanceof telegram_1.Api.ChatBannedRights) {
                this.defaultBannedRights = new BannedRight_1.BannedRights(resultsGetEntity.defaultBannedRights);
            }
            this.participantsCount = resultsGetEntity.participantsCount;
            if (resultsGetEntity.restrictionReason) {
                var temp = [];
                for (var i = 0; i < resultsGetEntity.restrictionReason.length; i++) {
                    temp.push(new RestrictionReason_1.RestrictionReason(resultsGetEntity.restrictionReason[i]));
                }
                this.restrictionReason = temp;
            }
            if (resultsGetEntity.photo instanceof telegram_1.Api.ChatPhoto) {
                resultsGetEntity.photo;
                this.photo = new ChatPhoto_1.ChatPhoto(resultsGetEntity.photo, this);
                this.dcId = resultsGetEntity.photo.dcId;
            }
        }
    }
    return ResultGetEntity;
}());
exports.ResultGetEntity = ResultGetEntity;
function GetEntity(snakeClient, chatId, useCache) {
    return __awaiter(this, void 0, void 0, function () {
        var mode, e, r, error_1, botError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    mode = ['debug', 'info'];
                    if (mode.includes(snakeClient.logger)) {
                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Running telegram.getEntity"));
                    }
                    if (useCache) {
                        if (typeof chatId == 'number') {
                            if (snakeClient.entityCache.get(BigInt((0, ToBigInt_1.toString)(chatId)))) {
                                if (mode.includes(snakeClient.logger)) {
                                    snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - [telegram.getEntity] using cache"));
                                }
                                //@ts-ignore
                                return [2 /*return*/, snakeClient.entityCache.get(BigInt((0, ToBigInt_1.toString)(chatId)))];
                            }
                        }
                        if (typeof chatId == 'bigint') {
                            if (snakeClient.entityCache.get(chatId)) {
                                if (mode.includes(snakeClient.logger)) {
                                    snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - [telegram.getEntity] using cache"));
                                }
                                //@ts-ignore
                                return [2 /*return*/, snakeClient.entityCache.get(chatId)];
                            }
                        }
                        if (typeof chatId == 'string') {
                            if (String(chatId).startsWith('@')) {
                                if (snakeClient.entityCache.get(String(chatId).replace('@', ''))) {
                                    if (mode.includes(snakeClient.logger)) {
                                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - [telegram.getEntity] using cache"));
                                    }
                                    //@ts-ignore
                                    return [2 /*return*/, snakeClient.entityCache.get(String(chatId).replace('@', ''))];
                                }
                            }
                        }
                    }
                    return [4 /*yield*/, snakeClient.client.getEntity((0, ToBigInt_1.convertId)(chatId))];
                case 1:
                    e = _a.sent();
                    r = new ResultGetEntity(e);
                    snakeClient.entityCache.set(r.id, r);
                    if (r.username)
                        snakeClient.entityCache.set(r.username, r);
                    return [2 /*return*/, r];
                case 2:
                    error_1 = _a.sent();
                    botError = new Error_1.default();
                    botError.error = error_1;
                    botError.functionName = 'telegram.getEntity';
                    botError.functionArgs = "".concat(chatId, ",").concat(useCache);
                    throw botError;
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.GetEntity = GetEntity;
