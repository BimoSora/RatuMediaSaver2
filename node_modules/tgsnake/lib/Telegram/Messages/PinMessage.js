"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinMessage = void 0;
var telegram_1 = require("telegram");
var Updates = __importStar(require("../../Update"));
var ToBigInt_1 = require("../../Utils/ToBigInt");
var Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Pin or unpin a message.
 * @param snakeClient - Client
 * @param {number|string|bigint} chatId - where to pin or unpin the message.
 * @param {number} messageId - The message to pin or unpin
 * @param {Object} more - more parameter for PinMessage
 * ```ts
 * bot.command("pin",async (ctx)=>{
 *     let results = await ctx.telegram.pinMessage(ctx.chat.id,ctx.id)
 *     console.log(results)
 * })
 * // unpin a message
 * bot.command("unpin",async (ctx)=>{
 *     if(ctx.replyToMessage){
 *         let results = await ctx.telegram.unpinMessage(ctx.chat.id,ctx.replyToMessage.id)
 *         console.log(results)
 *     }
 * })
 * ```
 */
function PinMessage(snakeClient, chatId, messageId, more) {
    return __awaiter(this, void 0, void 0, function () {
        var mode, _a, id, type, peer, results, error_1, botError;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 4, , 5]);
                    mode = ['debug', 'info'];
                    if (mode.includes(snakeClient.logger)) {
                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Running telegram.pinMessage"));
                    }
                    return [4 /*yield*/, (0, ToBigInt_1.toBigInt)(chatId, snakeClient)];
                case 1:
                    _a = __read.apply(void 0, [_b.sent(), 3]), id = _a[0], type = _a[1], peer = _a[2];
                    return [4 /*yield*/, snakeClient.client.invoke(new telegram_1.Api.messages.UpdatePinnedMessage(__assign({ peer: peer, id: messageId }, more)))];
                case 2:
                    results = _b.sent();
                    return [4 /*yield*/, generateResults(results, snakeClient)];
                case 3: return [2 /*return*/, _b.sent()];
                case 4:
                    error_1 = _b.sent();
                    botError = new Error_1.default();
                    botError.error = error_1;
                    botError.functionName = 'telegram.pinMessage';
                    botError.functionArgs = "".concat(chatId, ",").concat(messageId).concat(more ? ',' + JSON.stringify(more) : '');
                    throw botError;
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.PinMessage = PinMessage;
function generateResults(results, SnakeClient) {
    return __awaiter(this, void 0, void 0, function () {
        var mode, i, update, res, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mode = ['debug', 'info'];
                    if (mode.includes(SnakeClient.logger)) {
                        SnakeClient.log("[".concat(SnakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Creating results telegram.pinMessage"));
                    }
                    if (!(results instanceof telegram_1.Api.Updates)) return [3 /*break*/, 7];
                    results;
                    if (!(results.updates.length > 0)) return [3 /*break*/, 7];
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < results.updates.length)) return [3 /*break*/, 7];
                    update = results.updates[i];
                    if (!(update instanceof telegram_1.Api.UpdateNewMessage)) return [3 /*break*/, 3];
                    update;
                    res = new Updates.UpdateNewMessage();
                    return [4 /*yield*/, res.init(update, SnakeClient)];
                case 2:
                    _a.sent();
                    return [2 /*return*/, res];
                case 3:
                    if (!(update instanceof telegram_1.Api.UpdateNewChannelMessage)) return [3 /*break*/, 5];
                    update;
                    res = new Updates.UpdateNewChannelMessage();
                    return [4 /*yield*/, res.init(update, SnakeClient)];
                case 4:
                    _a.sent();
                    return [2 /*return*/, res];
                case 5:
                    if (update instanceof telegram_1.Api.UpdatePinnedMessages) {
                        update;
                        //todo
                        // using Updates.UpdatePinnedMessages
                        return [2 /*return*/, update];
                    }
                    if (update instanceof telegram_1.Api.UpdatePinnedChannelMessages) {
                        update;
                        //todo
                        //using Updates.UpdatePinnedChannelMessage
                        return [2 /*return*/, update];
                    }
                    _a.label = 6;
                case 6:
                    i++;
                    return [3 /*break*/, 1];
                case 7: return [2 /*return*/];
            }
        });
    });
}
