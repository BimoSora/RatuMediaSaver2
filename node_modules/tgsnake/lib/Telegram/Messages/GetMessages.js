"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultsGetMessage = exports.GetMessages = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var telegram_1 = require("telegram");
var MessageContext_1 = require("../../Context/MessageContext");
var ToBigInt_1 = require("../../Utils/ToBigInt");
var Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Returns the list of messages by their IDs.
 * @param snakeClient - Client
 * @param {bigint|number|string} chatId - Chat/Groups/Channel id.
 * @param {Array} messageId - Message Id.
 * @param {boolean} replies - if `true` it will getting the nested reply. and will making floodwait.
 * ```ts
 *   bot.command("getMessages",async (ctx)=>{
 *       let results = await ctx.telegram.getMessages(ctx.chat.id,[ctx.id])
 *       console.log(results)
 *   })
 * ```
 */
function GetMessages(snakeClient, chatId, messageId, replies) {
    if (replies === void 0) { replies = false; }
    return __awaiter(this, void 0, void 0, function () {
        var mode, messageIds, _a, id, type, peer, results, final, results, final, error_1, botError;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 8, , 9]);
                    mode = ['debug', 'info'];
                    if (mode.includes(snakeClient.logger)) {
                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Running telegram.getMessages"));
                    }
                    messageIds = messageId;
                    return [4 /*yield*/, (0, ToBigInt_1.toBigInt)(chatId, snakeClient)];
                case 1:
                    _a = __read.apply(void 0, [_b.sent(), 3]), id = _a[0], type = _a[1], peer = _a[2];
                    if (!(type == 'channel' || type == 'supergroup')) return [3 /*break*/, 4];
                    return [4 /*yield*/, snakeClient.client.invoke(new telegram_1.Api.channels.GetMessages({
                            channel: peer,
                            id: messageIds,
                        }))];
                case 2:
                    results = _b.sent();
                    final = new ResultsGetMessage();
                    return [4 /*yield*/, final.init(results, snakeClient, replies)];
                case 3:
                    _b.sent();
                    return [2 /*return*/, final];
                case 4: return [4 /*yield*/, snakeClient.client.invoke(new telegram_1.Api.messages.GetMessages({
                        id: messageIds,
                    }))];
                case 5:
                    results = _b.sent();
                    final = new ResultsGetMessage();
                    return [4 /*yield*/, final.init(results, snakeClient, replies)];
                case 6:
                    _b.sent();
                    return [2 /*return*/, final];
                case 7: return [3 /*break*/, 9];
                case 8:
                    error_1 = _b.sent();
                    botError = new Error_1.default();
                    botError.error = error_1;
                    botError.functionName = 'telegram.getMessages';
                    botError.functionArgs = "".concat(chatId, ",").concat(JSON.stringify(messageId));
                    throw botError;
                case 9: return [2 /*return*/];
            }
        });
    });
}
exports.GetMessages = GetMessages;
var ResultsGetMessage = /** @class */ (function () {
    function ResultsGetMessage() {
        this.date = Math.floor(Date.now() / 1000);
    }
    ResultsGetMessage.prototype.init = function (results, SnakeClient, replies) {
        if (replies === void 0) { replies = false; }
        return __awaiter(this, void 0, void 0, function () {
            var mode, tempMessages, i, msg, msgc, i, msg, msgc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mode = ['debug', 'info'];
                        if (mode.includes(SnakeClient.logger)) {
                            SnakeClient.log("[".concat(SnakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Creating results telegram.getMessages"));
                        }
                        tempMessages = [];
                        if (!(results instanceof telegram_1.Api.messages.ChannelMessages)) return [3 /*break*/, 4];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < results.messages.length)) return [3 /*break*/, 4];
                        msg = results.messages[i];
                        if (!replies) {
                            delete msg.replyTo;
                        }
                        msgc = new MessageContext_1.MessageContext();
                        return [4 /*yield*/, msgc.init(msg, SnakeClient)];
                    case 2:
                        _a.sent();
                        tempMessages.push(msgc);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        if (!(results instanceof telegram_1.Api.messages.Messages)) return [3 /*break*/, 8];
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < results.messages.length)) return [3 /*break*/, 8];
                        msg = results.messages[i];
                        if (!replies) {
                            delete msg.replyTo;
                        }
                        msgc = new MessageContext_1.MessageContext();
                        return [4 /*yield*/, msgc.init(msg, SnakeClient)];
                    case 6:
                        _a.sent();
                        tempMessages.push(msgc);
                        _a.label = 7;
                    case 7:
                        i++;
                        return [3 /*break*/, 5];
                    case 8:
                        this.messages = tempMessages;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    return ResultsGetMessage;
}());
exports.ResultsGetMessage = ResultsGetMessage;
