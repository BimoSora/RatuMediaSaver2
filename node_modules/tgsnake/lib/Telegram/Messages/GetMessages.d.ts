import { Api } from 'telegram';
import { Snake } from '../../client';
import { MessageContext } from '../../Context/MessageContext';
/**
 * Returns the list of messages by their IDs.
 * @param snakeClient - Client
 * @param {bigint|number|string} chatId - Chat/Groups/Channel id.
 * @param {Array} messageId - Message Id.
 * @param {boolean} replies - if `true` it will getting the nested reply. and will making floodwait.
 * ```ts
 *   bot.command("getMessages",async (ctx)=>{
 *       let results = await ctx.telegram.getMessages(ctx.chat.id,[ctx.id])
 *       console.log(results)
 *   })
 * ```
 */
export declare function GetMessages(snakeClient: Snake, chatId: number | string | bigint, messageId: number[], replies?: boolean): Promise<ResultsGetMessage>;
export declare class ResultsGetMessage {
    messages: MessageContext[];
    date: number | Date;
    constructor();
    init(results: Api.messages.TypeMessages, SnakeClient: Snake, replies?: boolean): Promise<this>;
}
