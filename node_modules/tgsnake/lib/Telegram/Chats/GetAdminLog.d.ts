import { Snake } from '../../client';
export declare class ClassResultGetAdminLog {
    log: ClassLogGetAdminLog[];
    constructor(resultGetAdminLog: any);
}
declare class ClassLogGetAdminLog {
    id?: number | string;
    date?: Date | number;
    action?: string;
    userId?: number | bigint;
    constructor(event: any);
}
export interface getAdminLogMoreParams {
    q?: string;
    join?: boolean;
    leave?: boolean;
    invite?: boolean;
    ban?: boolean;
    unban?: boolean;
    kick?: boolean;
    unkick?: boolean;
    promote?: boolean;
    demote?: boolean;
    info?: boolean;
    settings?: boolean;
    pinned?: boolean;
    groupCall?: boolean;
    invites?: boolean;
    edit?: boolean;
    delete?: boolean;
    maxId?: bigint;
    minId?: bigint;
    limit?: number;
}
/**
 * Get the admin log of a channel/supergroup.
 * @param snakeClient - Client
 * @param {number|string|bigint} chatId -  Chat/Channel/Group id.
 * @param {Object} more - more parameters to use.
 * ```ts
 * bot.command("getAdminLog",async (ctx) => {
 *     if(!ctx.chat.private){
 *        let results = await ctx.telegram.getAdminLog(ctx.chat.id)
 *        console.log(results)
 *     }
 * })
 * ```
 */
export declare function GetAdminLog(snakeClient: Snake, chatId: number | string | bigint, more?: getAdminLogMoreParams): Promise<ClassResultGetAdminLog>;
export {};
