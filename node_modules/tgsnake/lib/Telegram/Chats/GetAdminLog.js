"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAdminLog = exports.ClassResultGetAdminLog = void 0;
var telegram_1 = require("telegram");
var big_integer_1 = __importDefault(require("big-integer"));
var Error_1 = __importDefault(require("../../Context/Error"));
var ToBigInt_1 = require("../../Utils/ToBigInt");
var ClassResultGetAdminLog = /** @class */ (function () {
    function ClassResultGetAdminLog(resultGetAdminLog) {
        if (resultGetAdminLog) {
            if (resultGetAdminLog.events.length > 0) {
                var tempLog = new Array();
                for (var i = 0; i < resultGetAdminLog.events.length; i++) {
                    var event = resultGetAdminLog.events[i];
                    tempLog.push(new ClassLogGetAdminLog(event));
                }
                this.log = tempLog;
            }
        }
    }
    return ClassResultGetAdminLog;
}());
exports.ClassResultGetAdminLog = ClassResultGetAdminLog;
var ClassLogGetAdminLog = /** @class */ (function () {
    function ClassLogGetAdminLog(event) {
        if (event) {
            if (event.id)
                this.id = event.id;
            if (event.date)
                this.date = event.date;
            if (event.userId)
                this.userId = BigInt((0, ToBigInt_1.toString)(event.userId));
            if (event.action) {
                var tempAction = __assign({}, event.action);
                delete tempAction.CONSTRUCTOR_ID;
                delete tempAction.SUBCLASS_OF_ID;
                delete tempAction.classType;
                tempAction.actionName = String(tempAction.className).replace(/^(ChannelAdminLogEventAction|AdminLogEventAction)/i, '');
                delete tempAction.className;
                this.action = tempAction;
            }
        }
    }
    return ClassLogGetAdminLog;
}());
/**
 * Get the admin log of a channel/supergroup.
 * @param snakeClient - Client
 * @param {number|string|bigint} chatId -  Chat/Channel/Group id.
 * @param {Object} more - more parameters to use.
 * ```ts
 * bot.command("getAdminLog",async (ctx) => {
 *     if(!ctx.chat.private){
 *        let results = await ctx.telegram.getAdminLog(ctx.chat.id)
 *        console.log(results)
 *     }
 * })
 * ```
 */
function GetAdminLog(snakeClient, chatId, more) {
    return __awaiter(this, void 0, void 0, function () {
        var mode, filter, _a, error_1, botError;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    mode = ['debug', 'info'];
                    if (mode.includes(snakeClient.logger)) {
                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Running telegram.getAdminLog"));
                    }
                    filter = {
                        join: (more === null || more === void 0 ? void 0 : more.join) || true,
                        leave: (more === null || more === void 0 ? void 0 : more.leave) || true,
                        invite: (more === null || more === void 0 ? void 0 : more.invite) || true,
                        ban: (more === null || more === void 0 ? void 0 : more.ban) || true,
                        unban: (more === null || more === void 0 ? void 0 : more.unban) || true,
                        kick: (more === null || more === void 0 ? void 0 : more.kick) || true,
                        unkick: (more === null || more === void 0 ? void 0 : more.unkick) || true,
                        promote: (more === null || more === void 0 ? void 0 : more.promote) || true,
                        demote: (more === null || more === void 0 ? void 0 : more.demote) || true,
                        info: (more === null || more === void 0 ? void 0 : more.info) || true,
                        settings: (more === null || more === void 0 ? void 0 : more.settings) || true,
                        pinned: (more === null || more === void 0 ? void 0 : more.pinned) || true,
                        groupCall: (more === null || more === void 0 ? void 0 : more.groupCall) || true,
                        invites: (more === null || more === void 0 ? void 0 : more.invites) || true,
                        edit: (more === null || more === void 0 ? void 0 : more.edit) || true,
                        delete: (more === null || more === void 0 ? void 0 : more.delete) || true,
                    };
                    _a = ClassResultGetAdminLog.bind;
                    return [4 /*yield*/, snakeClient.client.invoke(new telegram_1.Api.channels.GetAdminLog({
                            channel: (0, ToBigInt_1.convertId)(chatId),
                            eventsFilter: new telegram_1.Api.ChannelAdminLogEventsFilter(filter),
                            q: (more === null || more === void 0 ? void 0 : more.q) ? more.q : '',
                            maxId: (more === null || more === void 0 ? void 0 : more.maxId) ? (0, big_integer_1.default)(more.maxId) : undefined,
                            minId: (more === null || more === void 0 ? void 0 : more.minId) ? (0, big_integer_1.default)(more.minId) : undefined,
                            limit: (more === null || more === void 0 ? void 0 : more.limit) ? Number(more.limit) : undefined,
                        }))];
                case 1: return [2 /*return*/, new (_a.apply(ClassResultGetAdminLog, [void 0, _b.sent()]))()];
                case 2:
                    error_1 = _b.sent();
                    botError = new Error_1.default();
                    botError.error = error_1;
                    botError.functionName = 'telegram.getAdminLog';
                    botError.functionArgs = "".concat(chatId).concat(more ? ',' + JSON.stringify(more) : '');
                    throw botError;
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.GetAdminLog = GetAdminLog;
