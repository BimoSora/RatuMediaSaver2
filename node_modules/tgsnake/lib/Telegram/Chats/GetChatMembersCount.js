"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetChatMembersCount = void 0;
var GetEntity_1 = require("../Users/GetEntity");
var telegram_1 = require("telegram");
var Error_1 = __importDefault(require("../../Context/Error"));
var big_integer_1 = __importDefault(require("big-integer"));
/**
 * Get the number of members in a chat.
 * @param snakeClient - client
 * @param {number|string|bigint} chatId - Chat or channels id to getting the number of members.
 * ```ts
 * bot.command("getChatMembersCount",async (ctx) => {
 *     let results = await ctx.telegram.getChatMembersCount(ctx.chat.id)
 *     console.log(results)
 * })
 * ```
 */
function GetChatMembersCount(snakeClient, chatId) {
    return __awaiter(this, void 0, void 0, function () {
        var mode, chat, r, s, r, fc, s, error_1, botError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 6, , 7]);
                    mode = ['debug', 'info'];
                    if (mode.includes(snakeClient.logger)) {
                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Running telegram.getChatMembersCount"));
                    }
                    return [4 /*yield*/, snakeClient.telegram.getEntity(chatId, true)];
                case 1:
                    chat = _a.sent();
                    if (chat.type === 'user') {
                        throw new Error('Typeof chatId must be channel or chat, not a user.');
                    }
                    if (chat.participantsCount && chat.participantsCount !== null) {
                        return [2 /*return*/, chat.participantsCount];
                    }
                    if (!(chat.type == 'chat')) return [3 /*break*/, 3];
                    return [4 /*yield*/, snakeClient.client.invoke(new telegram_1.Api.messages.GetChats({
                            id: [(0, big_integer_1.default)(chat.id)],
                        }))];
                case 2:
                    r = _a.sent();
                    s = r.chats[0];
                    snakeClient.entityCache.set(chat.id, new GetEntity_1.ResultGetEntity(s));
                    return [2 /*return*/, s.participantsCount];
                case 3:
                    if (!(chat.type == 'channel' || chat.type == 'supergroup')) return [3 /*break*/, 5];
                    return [4 /*yield*/, snakeClient.client.invoke(new telegram_1.Api.channels.GetFullChannel({
                            channel: (0, big_integer_1.default)(chat.id),
                        }))];
                case 4:
                    r = _a.sent();
                    fc = r.fullChat;
                    s = r.chats[0];
                    s.participantsCount = fc.participantsCount;
                    snakeClient.entityCache.set(chat.id, new GetEntity_1.ResultGetEntity(s));
                    return [2 /*return*/, s.participantsCount];
                case 5: return [3 /*break*/, 7];
                case 6:
                    error_1 = _a.sent();
                    botError = new Error_1.default();
                    botError.error = error_1;
                    botError.functionName = 'telegram.getChatMembersCount';
                    botError.functionArgs = "".concat(chatId);
                    throw botError;
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.GetChatMembersCount = GetChatMembersCount;
