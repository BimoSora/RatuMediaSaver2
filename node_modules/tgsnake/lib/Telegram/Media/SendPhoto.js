"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendPhoto = void 0;
var telegram_1 = require("telegram");
var SendMedia_1 = require("./SendMedia");
var UploadFile_1 = require("./UploadFile");
var tg_file_id_1 = require("tg-file-id");
var Media_1 = require("../../Utils/Media");
var big_integer_1 = __importDefault(require("big-integer"));
var Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Sending photo with fileId/file location/url/buffer.
 * @param snakeClient - client
 * @param {number|string|bigint} chatId - Chat/Groups/Channel id.
 * @param {string|Buffer|Object} fileId - FileId/File Location/Url/Buffer
 * @param {Object} more - more parameters to use.
 * ```ts
 * bot.on("message",async (ctx) => {
 *     if(ctx.media && ctx.media.type == "photo"){
 *         let results = await ctx.telegram.sendPhoto(ctx.chat.id,ctx.media.fileId)
 *         console.log(results)
 *     }
 * })
 * ```
 */
function SendPhoto(snakeClient, chatId, fileId, more) {
    return __awaiter(this, void 0, void 0, function () {
        var mode, file, media, file, media, file, accessHash, id, results, media, file, accessHash, id, results, media, error_1, botError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 5, , 6]);
                    mode = ['debug', 'info'];
                    if (mode.includes(snakeClient.logger)) {
                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Running telegram.sendPhoto"));
                    }
                    if (!Buffer.isBuffer(fileId)) return [3 /*break*/, 2];
                    fileId;
                    return [4 /*yield*/, (0, UploadFile_1.UploadFile)(snakeClient, fileId, {
                            workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                        })];
                case 1:
                    file = _a.sent();
                    media = new telegram_1.Api.InputMediaUploadedPhoto({
                        file: file,
                    });
                    return [2 /*return*/, (0, SendMedia_1.SendMedia)(snakeClient, chatId, media, more)];
                case 2:
                    if (!(typeof fileId == 'string' &&
                        (/^http/i.exec(String(fileId)) || /^(\/|\.\.?\/|~\/)/i.exec(String(fileId))))) return [3 /*break*/, 4];
                    fileId;
                    return [4 /*yield*/, (0, UploadFile_1.UploadFile)(snakeClient, fileId, {
                            workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                        })];
                case 3:
                    file = _a.sent();
                    media = new telegram_1.Api.InputMediaUploadedPhoto({
                        file: file,
                    });
                    return [2 /*return*/, (0, SendMedia_1.SendMedia)(snakeClient, chatId, media, more)];
                case 4:
                    // file id
                    if (fileId instanceof Media_1.Media) {
                        file = void 0;
                        try {
                            fileId;
                            file = fileId.decode();
                        }
                        catch (e) {
                            throw new Error('Invalid fileId!');
                        }
                        if (file) {
                            if (file.typeId !== 2) {
                                throw new Error("typeId invalid. typeId must be 2 but got ".concat(file.typeId));
                            }
                            accessHash = String(file.access_hash);
                            id = String(file.id);
                            results = void 0;
                            while (true) {
                                try {
                                    media = new telegram_1.Api.InputMediaPhoto({
                                        id: new telegram_1.Api.InputPhoto({
                                            id: (0, big_integer_1.default)(id),
                                            accessHash: (0, big_integer_1.default)(accessHash),
                                            fileReference: Buffer.from(file.fileReference, 'hex'),
                                        }),
                                    });
                                    results = (0, SendMedia_1.SendMedia)(snakeClient, chatId, media, more);
                                    break;
                                }
                                catch (e) {
                                    if (BigInt(accessHash) > BigInt(0) && BigInt(id) > BigInt(0)) {
                                        // id (+) accessHash (+)
                                        accessHash = "-".concat(accessHash); // id (+) accessHash (-)
                                    }
                                    else if (BigInt(accessHash) < BigInt(0) && BigInt(id) > BigInt(0)) {
                                        // id (+) accessHash (-)
                                        id = "-".concat(id); // id (-) accessHash (-)
                                    }
                                    else if (BigInt(accessHash) < BigInt(0) && BigInt(id) < BigInt(0)) {
                                        // id (-) accessHash (-)
                                        accessHash = accessHash.replace(/^\-/, '');
                                        // id (-) accessHash (+)
                                    }
                                    else {
                                        //@ts-ignore
                                        throw new Error(e.message);
                                        break;
                                    }
                                }
                            }
                            return [2 /*return*/, results];
                        }
                    }
                    if (typeof fileId == 'string') {
                        file = void 0;
                        try {
                            file = (0, tg_file_id_1.decodeFileId)(String(fileId));
                        }
                        catch (e) {
                            throw new Error('Invalid fileId!');
                        }
                        if (file) {
                            if (file.typeId !== 2) {
                                throw new Error("typeId invalid. typeId must be 2 but got ".concat(file.typeId));
                            }
                            accessHash = String(file.accessHash);
                            id = String(file.id);
                            results = void 0;
                            while (true) {
                                try {
                                    media = new telegram_1.Api.InputMediaPhoto({
                                        id: new telegram_1.Api.InputPhoto({
                                            id: (0, big_integer_1.default)(id),
                                            accessHash: (0, big_integer_1.default)(accessHash),
                                            fileReference: Buffer.from(file.fileReference, 'hex'),
                                        }),
                                    });
                                    results = (0, SendMedia_1.SendMedia)(snakeClient, chatId, media, more);
                                    break;
                                }
                                catch (e) {
                                    if (BigInt(accessHash) > BigInt(0) && BigInt(id) > BigInt(0)) {
                                        // id (+) accessHash (+)
                                        accessHash = "-".concat(accessHash); // id (+) accessHash (-)
                                    }
                                    else if (BigInt(accessHash) < BigInt(0) && BigInt(id) > BigInt(0)) {
                                        // id (+) accessHash (-)
                                        id = "-".concat(id); // id (-) accessHash (-)
                                    }
                                    else if (BigInt(accessHash) < BigInt(0) && BigInt(id) < BigInt(0)) {
                                        // id (-) accessHash (-)
                                        accessHash = accessHash.replace(/^\-/, '');
                                        // id (-) accessHash (+)
                                    }
                                    else {
                                        //@ts-ignore
                                        throw new Error(e.message);
                                        break;
                                    }
                                }
                            }
                            return [2 /*return*/, results];
                        }
                    }
                    return [3 /*break*/, 6];
                case 5:
                    error_1 = _a.sent();
                    botError = new Error_1.default();
                    botError.error = error_1;
                    botError.functionName = 'telegram.sendPhoto';
                    botError.functionArgs = "".concat(chatId, ",").concat(Buffer.isBuffer(fileId) ? "<Buffer ".concat(fileId.toString('hex'), ">") : JSON.stringify(fileId)).concat(more ? ',' + JSON.stringify(more) : '');
                    throw botError;
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.SendPhoto = SendPhoto;
