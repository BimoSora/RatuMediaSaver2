"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadFile = void 0;
var uploads_1 = require("telegram/client/uploads");
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var axios_1 = __importDefault(require("axios"));
var Error_1 = __importDefault(require("../../Context/Error"));
var file_type_1 = require("file-type");
function UploadFile(snakeClient, file, more) {
    return __awaiter(this, void 0, void 0, function () {
        var mode, fileInfo, file_name, toUpload, basename, res, data, basebuffer, file_name, match, fileInfo, toUpload, file_name, match, fileInfo, toUpload, error_1, botError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 12, , 13]);
                    mode = ['debug', 'info'];
                    if (mode.includes(snakeClient.logger)) {
                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Running telegram.uploadFile"), '\x1b[0m');
                    }
                    if (!Buffer.isBuffer(file)) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, file_type_1.fromBuffer)(file)];
                case 1:
                    fileInfo = _a.sent();
                    file_name = (more === null || more === void 0 ? void 0 : more.fileName) || "".concat(Date.now() / 1000, ".").concat(fileInfo === null || fileInfo === void 0 ? void 0 : fileInfo.ext);
                    toUpload = new uploads_1.CustomFile(file_name, Buffer.byteLength(file), '', file);
                    return [2 /*return*/, snakeClient.client.uploadFile({
                            file: toUpload,
                            workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                            onProgress: more === null || more === void 0 ? void 0 : more.onProgress,
                        })];
                case 2:
                    basename = path_1.default.basename(file);
                    if (!/^http/i.exec(file)) return [3 /*break*/, 7];
                    return [4 /*yield*/, axios_1.default.get(file, {
                            responseType: 'arraybuffer',
                        })];
                case 3:
                    res = _a.sent();
                    data = res.data;
                    basebuffer = Buffer.from(data, 'utf-8');
                    file_name = (more === null || more === void 0 ? void 0 : more.fileName) || basename;
                    match = /\.([0-9a-z]+)(?=[?#])|(\.)(?:[\w]+)$/gim.exec(file_name);
                    if (!!match) return [3 /*break*/, 5];
                    return [4 /*yield*/, (0, file_type_1.fromBuffer)(basebuffer)];
                case 4:
                    fileInfo = _a.sent();
                    if (fileInfo) {
                        file_name = "".concat(file_name, ".").concat(fileInfo.ext);
                    }
                    _a.label = 5;
                case 5:
                    toUpload = new uploads_1.CustomFile(file_name, Buffer.byteLength(basebuffer), '', basebuffer);
                    return [4 /*yield*/, snakeClient.client.uploadFile({
                            file: toUpload,
                            workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                            onProgress: more === null || more === void 0 ? void 0 : more.onProgress,
                        })];
                case 6: return [2 /*return*/, _a.sent()];
                case 7:
                    if (!/^(\/|\.\.?\/|~\/)/i.exec(file)) return [3 /*break*/, 11];
                    file_name = (more === null || more === void 0 ? void 0 : more.fileName) || basename;
                    match = /\.([0-9a-z]+)(?=[?#])|(\.)(?:[\w]+)$/gim.exec(file_name);
                    if (!!match) return [3 /*break*/, 9];
                    return [4 /*yield*/, (0, file_type_1.fromFile)(file)];
                case 8:
                    fileInfo = _a.sent();
                    if (fileInfo) {
                        file_name = "".concat(file_name, ".").concat(fileInfo.ext);
                    }
                    _a.label = 9;
                case 9:
                    toUpload = new uploads_1.CustomFile(file_name, fs_1.default.statSync(file).size, file);
                    return [4 /*yield*/, snakeClient.client.uploadFile({
                            file: toUpload,
                            workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                            onProgress: more === null || more === void 0 ? void 0 : more.onProgress,
                        })];
                case 10: return [2 /*return*/, _a.sent()];
                case 11: return [3 /*break*/, 13];
                case 12:
                    error_1 = _a.sent();
                    botError = new Error_1.default();
                    botError.error = error_1;
                    botError.functionName = 'telegram.uploadFile';
                    botError.functionArgs = "".concat(Buffer.isBuffer(file) ? "<Buffer ".concat(file.toString('hex'), ">") : file).concat(more ? ',' + JSON.stringify(more) : '');
                    throw botError;
                case 13: return [2 /*return*/];
            }
        });
    });
}
exports.UploadFile = UploadFile;
