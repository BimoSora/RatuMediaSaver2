"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendDocument = void 0;
var telegram_1 = require("telegram");
var SendMedia_1 = require("./SendMedia");
var UploadFile_1 = require("./UploadFile");
var GetFileInfo_1 = require("./GetFileInfo");
var path_1 = __importDefault(require("path"));
var Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Sending Document file location/url/buffer.
 * @param snakeClient - Client
 * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
 * @param {string|Buffer} fileId - File Location/Url/Buffer .
 * @param {Object} more - more parameters to use.
 * ```ts
 * bot.command("doc",async (ctx) => {
 *     let results = await ctx.telegram.sendDocument(ctx.chat.id,"https://tgsnake.js.org/images/tgsnake.jpg")
 * })
 * ```
 */
function SendDocument(snakeClient, chatId, fileId, more) {
    return __awaiter(this, void 0, void 0, function () {
        var mode, file, info, final, file, info, basename, final, error_1, botError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 7, , 8]);
                    mode = ['debug', 'info'];
                    if (mode.includes(snakeClient.logger)) {
                        snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Running telegram.sendDocument"));
                    }
                    if (!Buffer.isBuffer(fileId)) return [3 /*break*/, 3];
                    fileId;
                    return [4 /*yield*/, (0, UploadFile_1.UploadFile)(snakeClient, fileId, {
                            workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                            fileName: more === null || more === void 0 ? void 0 : more.fileName,
                        })];
                case 1:
                    file = _a.sent();
                    return [4 /*yield*/, (0, GetFileInfo_1.GetFileInfo)(fileId)];
                case 2:
                    info = _a.sent();
                    final = new telegram_1.Api.InputMediaUploadedDocument({
                        file: file,
                        mimeType: (info === null || info === void 0 ? void 0 : info.mime) || (more === null || more === void 0 ? void 0 : more.mimeType) || 'unknown',
                        attributes: [
                            new telegram_1.Api.DocumentAttributeFilename({
                                fileName: (more === null || more === void 0 ? void 0 : more.fileName) || 'unknown',
                            }),
                        ],
                        forceFile: (more === null || more === void 0 ? void 0 : more.forceDocument) || false,
                    });
                    return [2 /*return*/, (0, SendMedia_1.SendMedia)(snakeClient, chatId, final, more)];
                case 3:
                    if (!(typeof fileId == 'string')) return [3 /*break*/, 6];
                    fileId;
                    if (!(/^http/i.exec(String(fileId)) || /^(\/|\.\.?\/|~\/)/i.exec(String(fileId)))) return [3 /*break*/, 6];
                    return [4 /*yield*/, (0, UploadFile_1.UploadFile)(snakeClient, fileId, {
                            workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                            fileName: more === null || more === void 0 ? void 0 : more.fileName,
                        })];
                case 4:
                    file = _a.sent();
                    return [4 /*yield*/, (0, GetFileInfo_1.GetFileInfo)(fileId)];
                case 5:
                    info = _a.sent();
                    basename = path_1.default.basename(fileId);
                    if (!/\.([0-9a-z]+)(?=[?#])|(\.)(?:[\w]+)$/gim.exec(basename)) {
                        basename = "".concat(basename, ".").concat(info === null || info === void 0 ? void 0 : info.ext);
                    }
                    final = new telegram_1.Api.InputMediaUploadedDocument({
                        file: file,
                        mimeType: (info === null || info === void 0 ? void 0 : info.mime) || (more === null || more === void 0 ? void 0 : more.mimeType) || 'unknown',
                        attributes: [
                            new telegram_1.Api.DocumentAttributeFilename({
                                fileName: basename,
                            }),
                        ],
                        forceFile: (more === null || more === void 0 ? void 0 : more.forceDocument) || false,
                    });
                    return [2 /*return*/, (0, SendMedia_1.SendMedia)(snakeClient, chatId, final, more)];
                case 6: return [3 /*break*/, 8];
                case 7:
                    error_1 = _a.sent();
                    botError = new Error_1.default();
                    botError.error = error_1;
                    botError.functionName = 'telegram.sendDocument';
                    botError.functionArgs = "".concat(chatId, ",").concat(Buffer.isBuffer(fileId) ? "<Buffer ".concat(fileId.toString('hex'), ">") : JSON.stringify(fileId)).concat(more ? ',' + JSON.stringify(more) : '');
                    throw botError;
                case 8: return [2 /*return*/];
            }
        });
    });
}
exports.SendDocument = SendDocument;
