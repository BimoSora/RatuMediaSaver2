"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateUserTyping = void 0;
var telegram_1 = require("telegram");
var From_1 = require("../Utils/From");
var Update_1 = require("./Update");
var ToBigInt_1 = require("../Utils/ToBigInt");
var UpdateUserTyping = /** @class */ (function (_super) {
    __extends(UpdateUserTyping, _super);
    function UpdateUserTyping() {
        var _this = _super.call(this) || this;
        _this['_'] = 'updateUserTyping';
        return _this;
    }
    UpdateUserTyping.prototype.init = function (update, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var mode, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mode = ['debug', 'info'];
                        if (mode.includes(SnakeClient.logger)) {
                            SnakeClient.log("[".concat(SnakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Creating update ").concat(this['_']));
                        }
                        this.telegram = SnakeClient.telegram;
                        if (!update.userId) return [3 /*break*/, 2];
                        user = new From_1.From();
                        return [4 /*yield*/, user.init(BigInt((0, ToBigInt_1.toString)(update.userId)), SnakeClient)];
                    case 1:
                        _a.sent();
                        this.user = user;
                        _a.label = 2;
                    case 2:
                        if (update.action instanceof telegram_1.Api.SendMessageTypingAction) {
                            this.action = 'typing';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageCancelAction) {
                            this.action = 'cancel';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageRecordVideoAction) {
                            this.action = 'recordVideo';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageUploadVideoAction) {
                            update.action;
                            this.action = 'uploadVideo';
                            this.progress = update.action.progress;
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageRecordAudioAction) {
                            this.action = 'recordAudio';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageUploadAudioAction) {
                            update.action;
                            this.action = 'uploadAudio';
                            this.progress = update.action.progress;
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageUploadPhotoAction) {
                            update.action;
                            this.action = 'uploadPhoto';
                            this.progress = update.action.progress;
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageUploadDocumentAction) {
                            update.action;
                            this.action = 'uploadDocument';
                            this.progress = update.action.progress;
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageGeoLocationAction) {
                            this.action = 'geoLocation';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageChooseContactAction) {
                            this.action = 'chooseContact';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageGamePlayAction) {
                            this.action = 'gamePlay';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageRecordRoundAction) {
                            this.action = 'recordRound';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageUploadRoundAction) {
                            update.action;
                            this.action = 'uploadRound';
                            this.progress = update.action.progress;
                        }
                        if (update.action instanceof telegram_1.Api.SpeakingInGroupCallAction) {
                            this.action = 'speakingInGroupCall';
                        }
                        if (update.action instanceof telegram_1.Api.SendMessageHistoryImportAction) {
                            update.action;
                            this.action = 'historyImport';
                            this.progress = update.action.progress;
                        }
                        return [2 /*return*/, this];
                }
            });
        });
    };
    return UpdateUserTyping;
}(Update_1.Update));
exports.UpdateUserTyping = UpdateUserTyping;
