"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainContext = void 0;
var GetEntity_1 = require("../Telegram/Users/GetEntity");
var Updates = __importStar(require("../Update"));
var Composer_1 = require("./Composer");
var Error_1 = __importDefault(require("./Error"));
var CleanObject_1 = require("../Utils/CleanObject");
var chalk_1 = __importDefault(require("chalk"));
var NodeUtil = __importStar(require("util"));
var MainContext = /** @class */ (function (_super) {
    __extends(MainContext, _super);
    function MainContext() {
        var _this = _super.call(this) || this;
        _this.connected = false;
        _this.entityCache = new Map();
        _this.tgSnakeLog = true;
        _this.log = function () {
            var e_1, _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (_this.tgSnakeLog) {
                if (args.length > 1) {
                    var fargs = new Array();
                    try {
                        for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                            var arg = args_1_1.value;
                            if (typeof arg == 'object') {
                                fargs.push(NodeUtil.inspect(arg, {
                                    showHidden: true,
                                    colors: true,
                                }));
                            }
                            else {
                                fargs.push(arg);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    console.log(chalk_1.default[_this.consoleColor].apply(chalk_1.default, __spreadArray([], __read(fargs), false)));
                }
                else {
                    var fargs = new Array();
                    if (typeof args[0] == 'object') {
                        fargs.push(NodeUtil.inspect(args[0], {
                            showHidden: true,
                            colors: true,
                        }));
                    }
                    else {
                        fargs.push(args[0]);
                    }
                    console.log(chalk_1.default[_this.consoleColor].apply(chalk_1.default, __spreadArray([], __read(fargs), false)));
                }
            }
            return args;
        };
        _this.errorHandler = function (error, update) {
            _this.consoleColor = 'red';
            _this.log("\uD83D\uDC0D Snake error (".concat(error.message, ") when processing update : "));
            _this.consoleColor = 'reset';
            _this.log(update);
            _this.consoleColor = 'red';
            _this.log("\uD83D\uDC0D ".concat(error.functionName, "(").concat(error.functionArgs, ")"));
            _this.consoleColor = 'green';
            throw error;
        };
        return _this;
    }
    MainContext.prototype.handleUpdate = function (update, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var parsed, parsedUpdate, error_1, botError, jsonUpdate, error_2, botError;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!update)
                            return [2 /*return*/, false];
                        return [4 /*yield*/, (0, CleanObject_1.Cleaning)(update)];
                    case 1:
                        update = _a.sent();
                        this.use = function () {
                            var botError = new Error_1.default();
                            botError.error = new Error("bot.use is unavailable when bot running. so kill bot first then add bot.use in your source code then running again.");
                            botError.functionName = 'Composer';
                            botError.functionArgs = "";
                            throw botError;
                        };
                        parsed = false;
                        if (!(update instanceof GetEntity_1.ResultGetEntity)) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        parsed = true;
                        parsedUpdate = update;
                        return [4 /*yield*/, (0, Composer_1.run)(this.middleware(), parsedUpdate)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, update];
                    case 4:
                        error_1 = _a.sent();
                        if (error_1 instanceof Error_1.default) {
                            //@ts-ignore
                            return [2 /*return*/, this.errorHandler(error_1, parsed ? parsedUpdate : update)];
                        }
                        botError = new Error_1.default();
                        botError.error = error_1;
                        botError.functionName = "handleUpdate";
                        botError.functionArgs = "[Update]";
                        //@ts-ignore
                        return [2 /*return*/, this.errorHandler(botError, parsed ? parsedUpdate : update)];
                    case 5: return [3 /*break*/, 11];
                    case 6:
                        if (!update.className) return [3 /*break*/, 11];
                        if (!Updates[update.className]) return [3 /*break*/, 11];
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 10, , 11]);
                        jsonUpdate = new Updates[update.className]();
                        return [4 /*yield*/, jsonUpdate.init(update, SnakeClient)];
                    case 8:
                        _a.sent();
                        parsed = true;
                        parsedUpdate = jsonUpdate;
                        return [4 /*yield*/, (0, Composer_1.run)(this.middleware(), parsedUpdate)];
                    case 9:
                        _a.sent();
                        return [2 /*return*/, jsonUpdate];
                    case 10:
                        error_2 = _a.sent();
                        if (error_2 instanceof Error_1.default) {
                            //@ts-ignore
                            return [2 /*return*/, this.errorHandler(error_2, parsed ? parsedUpdate : update)];
                        }
                        botError = new Error_1.default();
                        botError.error = error_2;
                        botError.functionName = "handleUpdate";
                        botError.functionArgs = "[Update]";
                        //@ts-ignore
                        return [2 /*return*/, this.errorHandler(botError, parsed ? parsedUpdate : update)];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    MainContext.prototype.catch = function (errorHandler) {
        return (this.errorHandler = errorHandler);
    };
    return MainContext;
}(Composer_1.Composer));
exports.MainContext = MainContext;
