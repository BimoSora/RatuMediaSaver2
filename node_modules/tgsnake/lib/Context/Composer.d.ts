import * as Updates from '../Update';
import { Context } from '../Update';
import { MessageContext } from './MessageContext';
import BotError from './Error';
declare type MaybeArray<T> = T | T[];
declare type MaybePromise<T> = T | Promise<T>;
declare type NextFn = () => MaybePromise<void>;
declare type MiddlewareFn<C> = (ctx: C, next: NextFn) => MaybePromise<any>;
interface MiddlewareObj<C> {
    middleware: () => MiddlewareFn<C>;
}
export declare type ErrorHandler = (error: BotError, context: Updates.TypeUpdate) => MaybePromise<any>;
declare function pass<C>(_ctx: C, next: NextFn): MaybePromise<void>;
export declare function run<C>(middleware: MiddlewareFn<C>, ctx: C): Promise<void>;
export declare class Composer implements MiddlewareObj<Updates.TypeUpdate> {
    private handler;
    prefix: string;
    constructor(...middleware: Array<MiddlewareFn<Updates.TypeUpdate>>);
    middleware(): MiddlewareFn<Updates.TypeUpdate<T>>;
    use(...middleware: Array<MiddlewareFn<Updates.TypeUpdate>>): Composer;
    on<K extends keyof Context>(filter: MaybeArray<K>, ...middleware: Array<MiddlewareFn<Context[K]>>): Composer;
    filter(predicate: any, ...middleware: any[]): Composer;
    drop(predicate: any, ...middleware: any[]): Composer;
    fork(...middleware: any[]): Composer;
    lazy(middlewareFactory: any): Composer;
    route(router: any, routeHandlers: any, fallback?: typeof pass): Composer;
    branch(predicate: any, trueMiddleware: any, falseMiddleware: any): Composer;
    command(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<MessageContext>>): Composer;
    cmd(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<MessageContext>>): Composer;
    hears(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<MessageContext>>): Composer;
    hear(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<MessageContext>>): Composer;
    action(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<Updates.UpdateBotCallbackQuery | Updates.UpdateInlineBotCallbackQuery>>): Composer;
}
export {};
