"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Composer = exports.run = void 0;
var MessageContext_1 = require("./MessageContext");
var GetEntity_1 = require("../Telegram/Users/GetEntity");
function flatten(mw) {
    return typeof mw === 'function' ? mw : function (ctx, next) { return mw.middleware()(ctx, next); };
}
function concat(first, andThen) {
    var _this = this;
    return function (ctx, next) { return __awaiter(_this, void 0, void 0, function () {
        var nextCalled;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    nextCalled = false;
                    return [4 /*yield*/, first(ctx, function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        if (nextCalled)
                                            throw new Error('`next` already called before!');
                                        else
                                            nextCalled = true;
                                        return [4 /*yield*/, andThen(ctx, next)];
                                    case 1:
                                        _b.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    }); };
}
function pass(_ctx, next) {
    return next();
}
var leaf = function () { return Promise.resolve(); };
function triggerFn(trigger) {
    return toArray(trigger).map(function (t) {
        return typeof t === 'string' ? function (txt) { return (txt === t ? t : null); } : function (txt) { return t.exec(txt); };
    });
}
function match(ctx, content, triggers) {
    var e_1, _b;
    try {
        for (var triggers_1 = __values(triggers), triggers_1_1 = triggers_1.next(); !triggers_1_1.done; triggers_1_1 = triggers_1.next()) {
            var t = triggers_1_1.value;
            var res = t(content);
            if (res) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (triggers_1_1 && !triggers_1_1.done && (_b = triggers_1.return)) _b.call(triggers_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
function toArray(e) {
    return Array.isArray(e) ? e : [e];
}
function run(middleware, ctx) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, middleware(ctx, leaf)];
                case 1:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.run = run;
function filterEvent(filter, ctx) {
    var e_2, _b;
    var filters = toArray(filter);
    var h = [];
    h.push('*');
    if (ctx instanceof GetEntity_1.ResultGetEntity)
        h.push('connected');
    if (ctx instanceof MessageContext_1.MessageContext) {
        ctx;
        h.push('message');
        if (ctx.action) {
            h.push(ctx.action['_']);
        }
    }
    if (ctx['_']) {
        switch (ctx['_']) {
            case 'updateNewMessage':
            case 'updateShortMessage':
            case 'updateShortChatMessage':
            case 'updateNewChannelMessage':
                h.push('message');
                if (ctx.message) {
                    ctx.message;
                    if (ctx.message.action) {
                        h.push(ctx.message.action['_']);
                    }
                }
                break;
            case 'updateInlineBotCallbackQuery':
            case 'updateBotCallbackQuery':
                h.push('callbackQuery');
                break;
            case 'updateBotInlineQuery':
                h.push('inlineQuery');
                break;
            default:
        }
        h.push(ctx['_']);
        var logger = ['info', 'debug'];
        if (logger.includes(ctx.SnakeClient.logger)) {
            ctx.SnakeClient.log("[".concat(ctx.SnakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Receive ").concat(ctx['_']));
        }
    }
    try {
        for (var filters_1 = __values(filters), filters_1_1 = filters_1.next(); !filters_1_1.done; filters_1_1 = filters_1.next()) {
            var f = filters_1_1.value;
            return h.includes(f);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (filters_1_1 && !filters_1_1.done && (_b = filters_1.return)) _b.call(filters_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
var Composer = /** @class */ (function () {
    function Composer() {
        var middleware = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middleware[_i] = arguments[_i];
        }
        this.prefix = '.!/';
        this.handler = middleware.length === 0 ? pass : middleware.map(flatten).reduce(concat);
    }
    Composer.prototype.middleware = function () {
        return this.handler;
    };
    Composer.prototype.use = function () {
        var middleware = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middleware[_i] = arguments[_i];
        }
        var composer = new (Composer.bind.apply(Composer, __spreadArray([void 0], __read(middleware), false)))();
        this.handler = concat(this.handler, flatten(composer));
        return composer;
    };
    Composer.prototype.on = function (filter) {
        var middleware = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            middleware[_i - 1] = arguments[_i];
        }
        return this.filter.apply(this, __spreadArray([function (ctx) { return filterEvent(filter, ctx); }], __read(middleware), false));
    };
    Composer.prototype.filter = function (predicate) {
        var middleware = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            middleware[_i - 1] = arguments[_i];
        }
        var composer = new (Composer.bind.apply(Composer, __spreadArray([void 0], __read(middleware), false)))();
        this.branch(predicate, composer, pass);
        return composer;
    };
    Composer.prototype.drop = function (predicate) {
        var _this = this;
        var middleware = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            middleware[_i - 1] = arguments[_i];
        }
        return this.filter.apply(this, __spreadArray([function (ctx) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, predicate(ctx)];
                    case 1: return [2 /*return*/, !(_b.sent())];
                }
            }); }); }], __read(middleware), false));
    };
    Composer.prototype.fork = function () {
        var middleware = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middleware[_i] = arguments[_i];
        }
        var composer = new (Composer.bind.apply(Composer, __spreadArray([void 0], __read(middleware), false)))();
        var fork = flatten(composer);
        //@ts-ignore
        this.use(function (ctx, next) { return Promise.all([next(), run(fork, ctx)]); });
        return composer;
    };
    Composer.prototype.lazy = function (middlewareFactory) {
        var _this = this;
        return this.use(function (context, next) { return __awaiter(_this, void 0, void 0, function () {
            var ctx, middleware, arr;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ctx = context;
                        if (context['_']) {
                            switch (context['_']) {
                                case 'updateNewMessage':
                                case 'updateShortMessage':
                                case 'updateShortChatMessage':
                                case 'updateNewChannelMessage':
                                    //@ts-ignore
                                    ctx = context.message;
                                    break;
                                default:
                            }
                        }
                        return [4 /*yield*/, middlewareFactory(ctx)];
                    case 1:
                        middleware = _b.sent();
                        arr = toArray(middleware);
                        return [4 /*yield*/, flatten(new (Composer.bind.apply(Composer, __spreadArray([void 0], __read(arr), false)))())(ctx, next)];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Composer.prototype.route = function (router, routeHandlers, fallback) {
        var _this = this;
        if (fallback === void 0) { fallback = pass; }
        return this.lazy(function (ctx) { return __awaiter(_this, void 0, void 0, function () {
            var _a, route;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, router(ctx)];
                    case 1:
                        route = _b.sent();
                        return [2 /*return*/, route === undefined
                                ? []
                                : (_a = routeHandlers[route]) !== null && _a !== void 0
                                    ? _a
                                    : fallback];
                }
            });
        }); });
    };
    Composer.prototype.branch = function (predicate, trueMiddleware, falseMiddleware) {
        var _this = this;
        return this.lazy(function (ctx) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, predicate(ctx)];
                case 1: return [2 /*return*/, ((_b.sent()) ? trueMiddleware : falseMiddleware)];
            }
        }); }); });
    };
    Composer.prototype.command = function (trigger) {
        var _b;
        var _this = this;
        var middleware = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            middleware[_i - 1] = arguments[_i];
        }
        var key = toArray(trigger);
        var filterCmd = function (ctx) {
            var e_3, _b;
            var text = ctx.text;
            var aboutMe = ctx.SnakeClient.aboutMe;
            var s = text.split(' ');
            try {
                for (var key_1 = __values(key), key_1_1 = key_1.next(); !key_1_1.done; key_1_1 = key_1.next()) {
                    var cmd = key_1_1.value;
                    if (typeof cmd == 'string') {
                        cmd;
                        var r = new RegExp("^[".concat(_this.prefix, "](").concat(cmd, ")").concat(aboutMe.username ? "(@".concat(aboutMe.username, ")?") : "", "$"), 'i');
                        return r.test(String(s[0]));
                    }
                    if (cmd instanceof RegExp) {
                        cmd;
                        return cmd.test(String(s[0]));
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (key_1_1 && !key_1_1.done && (_b = key_1.return)) _b.call(key_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return false;
        };
        return (_b = this.on('message')).filter.apply(_b, __spreadArray([filterCmd], __read(middleware), false));
    };
    Composer.prototype.cmd = function (trigger) {
        var middleware = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            middleware[_i - 1] = arguments[_i];
        }
        return this.command.apply(this, __spreadArray([trigger], __read(middleware), false));
    };
    Composer.prototype.hears = function (trigger) {
        var _b;
        var middleware = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            middleware[_i - 1] = arguments[_i];
        }
        var tgr = triggerFn(trigger);
        return (_b = this.on('message')).filter.apply(_b, __spreadArray([function (ctx) {
                var text = ctx.text;
                return match(ctx, String(text), tgr);
            }], __read(middleware), false));
    };
    Composer.prototype.hear = function (trigger) {
        var middleware = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            middleware[_i - 1] = arguments[_i];
        }
        return this.hears.apply(this, __spreadArray([trigger], __read(middleware), false));
    };
    Composer.prototype.action = function (trigger) {
        var _b;
        var middleware = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            middleware[_i - 1] = arguments[_i];
        }
        var key = toArray(trigger);
        var filterCmd = function (ctx) {
            var e_4, _b;
            var data = ctx.data;
            try {
                for (var key_2 = __values(key), key_2_1 = key_2.next(); !key_2_1.done; key_2_1 = key_2.next()) {
                    var cmd = key_2_1.value;
                    if (typeof cmd == 'string') {
                        cmd;
                        return Boolean(cmd == data);
                    }
                    if (cmd instanceof RegExp) {
                        cmd;
                        return cmd.test(String(data));
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (key_2_1 && !key_2_1.done && (_b = key_2.return)) _b.call(key_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
            return false;
        };
        return (_b = this.on('callbackQuery')).filter.apply(_b, __spreadArray([filterCmd], __read(middleware), false));
    };
    return Composer;
}());
exports.Composer = Composer;
