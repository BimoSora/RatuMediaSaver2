"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snake = void 0;
var extensions_1 = require("telegram/extensions");
var telegram_1 = require("telegram");
var sessions_1 = require("telegram/sessions");
var Telegram_1 = require("./Telegram");
var MainContext_1 = require("./Context/MainContext");
var prompts_1 = __importDefault(require("prompts"));
var fs_1 = __importDefault(require("fs"));
var Error_1 = __importDefault(require("./Context/Error"));
var api_hash;
var api_id;
var session;
var bot_token;
var connectionRetries;
var appVersion;
var sessionName = 'tgsnake';
var storeSession = true;
var isBot = false;
var connectTime = 0;
var intervalCT;
function makeApiHash(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
function makeApiId(length) {
    var result = '';
    var characters = '0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
var Snake = /** @class */ (function (_super) {
    __extends(Snake, _super);
    function Snake(options) {
        var _this = _super.call(this) || this;
        _this.version = '2.0.0-beta.9';
        _this.logger = 'none';
        console.log("This different package from the one published on npm!");
        if (!options) {
            var dir = fs_1.default.readdirSync(process.cwd());
            // tgsnake.config.js
            if (dir.includes('tgsnake.config.js')) {
                var config = require("".concat(process.cwd(), "/tgsnake.config.js"));
                options = config;
            }
            // tgsnake.config.json
            else if (dir.includes('tgsnake.config.json')) {
                var config = fs_1.default.readFileSync("".concat(process.cwd(), "/tgsnake.config.js"), 'utf8');
                options = JSON.parse(config);
            }
        }
        //default options
        session = '';
        connectionRetries = 5;
        // custom options
        if (options) {
            if (options.logger) {
                _this.logger = options.logger;
                delete options.logger;
            }
            if (options.apiHash) {
                api_hash = String(options.apiHash);
                delete options.apiHash;
            }
            if (options.apiId) {
                api_id = Number(options.apiId);
                delete options.apiId;
            }
            if (options.session) {
                session = options.session;
                delete options.session;
            }
            if (options.botToken) {
                bot_token = options.botToken;
                delete options.botToken;
            }
            if (options.connectionRetries) {
                connectionRetries = options.connectionRetries;
                delete options.connectionRetries;
            }
            if (options.appVersion) {
                appVersion = options.appVersion;
                delete options.appVersion;
            }
            if (String(options.tgSnakeLog).toLowerCase() == 'false') {
                _this.tgSnakeLog = Boolean(options.tgSnakeLog);
                delete options.tgSnakeLog;
            }
            if (options.tgSnakeLog) {
                delete options.tgSnakeLog;
            }
            if (options.sessionName) {
                sessionName = options.sessionName;
                delete options.sessionName;
            }
            if (String(options.storeSession).toLowerCase() !== 'true') {
                storeSession = Boolean(options.storeSession);
                delete options.storeSession;
            }
            if (!options.useWSS) {
                options.useWSS = false;
            }
            _this.options = options;
        }
        extensions_1.Logger.setLevel(_this.logger);
        return _this;
    }
    Snake.prototype._convertString = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stringsession, storesession;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stringsession = new sessions_1.StringSession(session);
                        if (!(storeSession && session !== '')) return [3 /*break*/, 2];
                        storesession = new sessions_1.StoreSession(sessionName);
                        return [4 /*yield*/, stringsession.load()];
                    case 1:
                        _a.sent();
                        storesession.setDC(stringsession.dcId, stringsession.serverAddress, stringsession.port);
                        storesession.setAuthKey(stringsession.authKey);
                        return [2 /*return*/, storesession];
                    case 2: return [2 /*return*/, stringsession];
                }
            });
        });
    };
    Snake.prototype._createClient = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, error_1, botError;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        if (!api_hash) {
                            if (session == '') {
                                throw new Error('api_hash required!');
                            }
                            else {
                                api_hash = makeApiHash(32);
                            }
                        }
                        if (!api_id) {
                            if (session == '') {
                                throw new Error('api_id required!');
                            }
                            else {
                                api_id = Number(makeApiId(7));
                            }
                        }
                        if (!bot_token && session == '') {
                            throw new Error('bot_token required if you login as bot, session required if you login as user. To get session run generateSession function.');
                        }
                        _a = this;
                        _b = telegram_1.TelegramClient.bind;
                        return [4 /*yield*/, this._convertString()];
                    case 1:
                        _a.client = new (_b.apply(telegram_1.TelegramClient, [void 0, _c.sent(), Number(api_id),
                            String(api_hash), __assign({ connectionRetries: connectionRetries, appVersion: appVersion || this.version }, this.options)]))();
                        return [2 /*return*/, this.client];
                    case 2:
                        error_1 = _c.sent();
                        botError = new Error_1.default();
                        botError.error = error_1;
                        botError.functionName = '_createClient';
                        botError.functionArgs = "";
                        throw botError;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Snake.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var me, name, error_2, botError;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 13, , 14]);
                        process.once('SIGINT', function () {
                            _this.consoleColor = 'reset';
                            _this.log('🐍 Killing..');
                            if (_this.client)
                                _this.client.disconnect();
                            process.exit(0);
                        });
                        process.once('SIGTERM', function () {
                            _this.consoleColor = 'reset';
                            _this.log('🐍 Killing..');
                            if (_this.client)
                                _this.client.disconnect();
                            process.exit(0);
                        });
                        this.consoleColor = 'reset';
                        this.log("\uD83D\uDC0D Welcome To TGSNAKE ".concat(this.version, "."));
                        this.log("\uD83D\uDC0D Setting Logger level to \"".concat(this.logger, "\""));
                        this.consoleColor = 'green';
                        if (bot_token) {
                            if (session == '') {
                                storeSession = false;
                            }
                        }
                        if (!!this.client) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._createClient()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.telegram = new Telegram_1.Telegram(this);
                        if (!bot_token) return [3 /*break*/, 7];
                        if (!(session == '')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.client.start({
                                botAuthToken: bot_token,
                            })];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.client.connect()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, this.client.connect()];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [4 /*yield*/, this.telegram.getMe()];
                    case 10:
                        me = _a.sent();
                        isBot = me.bot;
                        this.aboutMe = me;
                        name = me.lastName
                            ? me.firstName + ' ' + me.lastName + ' [' + me.id + ']'
                            : me.firstName + ' [' + me.id + ']';
                        if (!!isBot) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.client.getDialogs({})];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12:
                        // new event
                        this.client.addEventHandler(function (update) {
                            return _this.handleUpdate(update, _this);
                        });
                        this.connected = true;
                        this.handleUpdate(me, this);
                        intervalCT = setInterval(function () {
                            connectTime++;
                        }, 1000);
                        this.consoleColor = 'reset';
                        this.log('🐍 Connected as ', name);
                        return [2 /*return*/, (this.consoleColor = 'green')];
                    case 13:
                        error_2 = _a.sent();
                        botError = new Error_1.default();
                        botError.error = error_2;
                        botError.functionName = 'run';
                        botError.functionArgs = "";
                        throw botError;
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    Snake.prototype.generateSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dir, input_api_hash, input_api_id, loginAsBot, _a, me, value, _b, _c, error_3, botError;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 24, , 25]);
                        process.once('SIGINT', function () {
                            _this.consoleColor = 'reset';
                            _this.log('🐍 Killing..');
                            if (_this.client)
                                _this.client.disconnect();
                            process.exit(0);
                        });
                        process.once('SIGTERM', function () {
                            _this.consoleColor = 'reset';
                            _this.log('🐍 Killing..');
                            if (_this.client)
                                _this.client.disconnect();
                            process.exit(0);
                        });
                        this.consoleColor = 'reset';
                        this.log("\uD83D\uDC0D Welcome To TGSNAKE ".concat(this.version, "."));
                        this.log("\uD83D\uDC0D Setting Logger level to \"".concat(this.logger, "\""));
                        this.consoleColor = 'green';
                        return [4 /*yield*/, fs_1.default.readdirSync('./')];
                    case 1:
                        dir = _d.sent();
                        if (!dir.includes(sessionName)) return [3 /*break*/, 3];
                        this.log("\uD83D\uDC0D Removing ".concat(sessionName, " folders."));
                        return [4 /*yield*/, fs_1.default.rmSync("./".concat(sessionName), {
                                recursive: true,
                                force: true,
                            })];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        if (!!api_hash) return [3 /*break*/, 5];
                        return [4 /*yield*/, (0, prompts_1.default)({
                                type: 'text',
                                name: 'value',
                                message: '🐍 Input your api_hash',
                            })];
                    case 4:
                        input_api_hash = _d.sent();
                        api_hash = input_api_hash.value;
                        _d.label = 5;
                    case 5:
                        if (!!api_id) return [3 /*break*/, 7];
                        return [4 /*yield*/, (0, prompts_1.default)({
                                type: 'text',
                                name: 'value',
                                message: '🐍 Input your api_id',
                            })];
                    case 6:
                        input_api_id = _d.sent();
                        api_id = input_api_id.value;
                        _d.label = 7;
                    case 7:
                        this.client = new telegram_1.TelegramClient(new sessions_1.StringSession(session), Number(api_id), String(api_hash), __assign({ connectionRetries: connectionRetries, appVersion: appVersion || this.version }, this.options));
                        this.telegram = new Telegram_1.Telegram(this);
                        if (!(session == '')) return [3 /*break*/, 22];
                        if (!!bot_token) return [3 /*break*/, 18];
                        return [4 /*yield*/, (0, prompts_1.default)({
                                type: 'confirm',
                                name: 'value',
                                initial: false,
                                message: '🐍 Login as bot?',
                            })];
                    case 8:
                        loginAsBot = _d.sent();
                        if (!!loginAsBot.value) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.client.start({
                                phoneNumber: function () { return __awaiter(_this, void 0, void 0, function () {
                                    var value;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, (0, prompts_1.default)({
                                                    type: 'text',
                                                    name: 'value',
                                                    message: '🐍 Input your international phone number',
                                                })];
                                            case 1:
                                                value = _a.sent();
                                                return [2 /*return*/, value.value];
                                        }
                                    });
                                }); },
                                password: function () { return __awaiter(_this, void 0, void 0, function () {
                                    var value;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, (0, prompts_1.default)({
                                                    type: 'text',
                                                    name: 'value',
                                                    message: '🐍 Input your 2FA password',
                                                })];
                                            case 1:
                                                value = _a.sent();
                                                return [2 /*return*/, value.value];
                                        }
                                    });
                                }); },
                                phoneCode: function () { return __awaiter(_this, void 0, void 0, function () {
                                    var value;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, (0, prompts_1.default)({
                                                    type: 'text',
                                                    name: 'value',
                                                    message: '🐍 Input Telegram verifications code',
                                                })];
                                            case 1:
                                                value = _a.sent();
                                                return [2 /*return*/, value.value];
                                        }
                                    });
                                }); },
                                onError: function (err) {
                                    console.log(err);
                                },
                            })];
                    case 9:
                        _d.sent();
                        _a = String;
                        return [4 /*yield*/, this.client.session.save()];
                    case 10:
                        session = _a.apply(void 0, [_d.sent()]);
                        console.log("\uD83D\uDC0D Your string session : ".concat(session));
                        return [4 /*yield*/, this.telegram.getMe()];
                    case 11:
                        me = _d.sent();
                        this.aboutMe = me;
                        return [4 /*yield*/, this.telegram.sendMessage(me.id, "\uD83D\uDC0D Your string session : <code>".concat(session, "</code>"), { parseMode: 'HTML' })];
                    case 12:
                        _d.sent();
                        return [3 /*break*/, 17];
                    case 13: return [4 /*yield*/, (0, prompts_1.default)({
                            type: 'text',
                            name: 'value',
                            message: '🐍 Input your bot_token',
                        })];
                    case 14:
                        value = _d.sent();
                        return [4 /*yield*/, this.client.start({
                                botAuthToken: value.value,
                            })];
                    case 15:
                        _d.sent();
                        _b = String;
                        return [4 /*yield*/, this.client.session.save()];
                    case 16:
                        session = _b.apply(void 0, [_d.sent()]);
                        console.log("\uD83D\uDC0D Your string session : ".concat(session));
                        _d.label = 17;
                    case 17: return [3 /*break*/, 21];
                    case 18: return [4 /*yield*/, this.client.start({
                            botAuthToken: bot_token,
                        })];
                    case 19:
                        _d.sent();
                        _c = String;
                        return [4 /*yield*/, this.client.session.save()];
                    case 20:
                        session = _c.apply(void 0, [_d.sent()]);
                        console.log("\uD83D\uDC0D Your string session : ".concat(session));
                        _d.label = 21;
                    case 21: return [3 /*break*/, 23];
                    case 22:
                        this.consoleColor = 'reset';
                        this.log("\uD83D\uDC0D You should use the `Snake.run()`!");
                        _d.label = 23;
                    case 23:
                        this.consoleColor = 'reset';
                        this.log('🐍 Killing...');
                        if (this.client)
                            this.client.disconnect();
                        process.exit(0);
                        return [3 /*break*/, 25];
                    case 24:
                        error_3 = _d.sent();
                        botError = new Error_1.default();
                        botError.error = error_3;
                        botError.functionName = 'generateSession';
                        botError.functionArgs = "";
                        throw botError;
                    case 25: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(Snake.prototype, "connectTime", {
        get: function () {
            var date = new Date(connectTime * 1000).toISOString().substr(9, 10).replace(/t/i, ':');
            var spl = date.split(':');
            // days:hours:minutes:seconds
            return "".concat(Number(spl[0]) - 1, ":").concat(spl[1], ":").concat(spl[2], ":").concat(spl[3]);
        },
        enumerable: false,
        configurable: true
    });
    Snake.prototype.restart = function () {
        return __awaiter(this, void 0, void 0, function () {
            var d, p, ping;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        d = Date.now();
                        this.consoleColor = 'reset';
                        return [4 /*yield*/, this.log("\uD83D\uDC0D Restarting after [".concat(this.connectTime, "] connected."))];
                    case 1:
                        _a.sent();
                        this.consoleColor = 'green';
                        connectTime = 0;
                        this.connected = false;
                        return [4 /*yield*/, clearInterval(intervalCT)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.client.disconnect()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.run()];
                    case 4:
                        _a.sent();
                        p = Date.now();
                        ping = Number((p - d) / 1000).toFixed(3);
                        return [2 /*return*/, "".concat(ping, " s")];
                }
            });
        });
    };
    return Snake;
}(MainContext_1.MainContext));
exports.Snake = Snake;
