"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplyToMessage = void 0;
var CleanObject_1 = require("./CleanObject");
var _SnakeClient;
var ReplyToMessage = /** @class */ (function () {
    function ReplyToMessage() {
    }
    ReplyToMessage.prototype.init = function (messageReplyHeader, SnakeClient, chatId) {
        return __awaiter(this, void 0, void 0, function () {
            var mode, message, msg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _SnakeClient = SnakeClient;
                        mode = ['debug', 'info'];
                        if (mode.includes(SnakeClient.logger)) {
                            SnakeClient.log("[".concat(SnakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Creating replyToMessage"));
                        }
                        if (!messageReplyHeader.replyToMsgId) return [3 /*break*/, 3];
                        this.id = messageReplyHeader.replyToMsgId;
                        return [4 /*yield*/, this.SnakeClient.telegram.getMessages(chatId, [this.id], false)];
                    case 1:
                        message = _a.sent();
                        if (message.messages[0]) {
                            msg = message.messages[0];
                            this.out = msg.out;
                            this.mentioned = msg.mentioned;
                            this.mediaUnread = msg.mediaUnread;
                            this.silent = msg.silent;
                            this.post = msg.post;
                            this.legacy = msg.legacy;
                            this.from = msg.from;
                            this.chat = msg.chat;
                            this.date = msg.date;
                            this.action = msg.action;
                            this.ttlPeriod = msg.ttlPeriod;
                            this.fromScheduled = msg.fromScheduled;
                            this.editHide = msg.editHide;
                            this.pinned = msg.pinned;
                            this.fwdFrom = msg.fwdFrom;
                            this.viaBotId = msg.viaBotId;
                            this.text = msg.text;
                            this.media = msg.media;
                            this.replyMarkup = msg.replyMarkup;
                            this.entities = msg.entities;
                            this.views = msg.views;
                            this.forwards = msg.forwards;
                            this.replies = msg.replies;
                            this.editDate = msg.editDate;
                            this.postAuthor = msg.postAuthor;
                            this.mediaGroupId = msg.mediaGroupId;
                            this.restrictionReason = msg.restrictionReason;
                            this.noforward = msg.noforward;
                            this.senderChat = msg.senderChat;
                            this.isAutomaticForward = msg.isAutomaticForward;
                        }
                        return [4 /*yield*/, (0, CleanObject_1.Cleaning)(this)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(ReplyToMessage.prototype, "SnakeClient", {
        get: function () {
            return _SnakeClient;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReplyToMessage.prototype, "telegram", {
        get: function () {
            return _SnakeClient.telegram;
        },
        enumerable: false,
        configurable: true
    });
    return ReplyToMessage;
}());
exports.ReplyToMessage = ReplyToMessage;
