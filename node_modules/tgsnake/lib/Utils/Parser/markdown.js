"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
var Entities_1 = require("../Entities");
function splice(source, start, delCount, newSubStr) {
    return source.slice(0, start) + newSubStr + source.slice(start + Math.abs(delCount));
}
var DEFAULT_DELIMITERS = {
    '**': 'bold',
    __: 'italic',
    '```': 'pre',
    '`': 'code',
    '~~': 'strike',
    '||': 'spoiler',
    '--': 'underline',
};
// [text](link)
//const LINK_FORMAT = "[%s](%s)"
var LINK_REGEX = /\[(.+?)\]\((.+?)\)/gi;
var LINK_ESC_REGEX = /\[(.+?)\]\\\((.+?)\)/gi;
function inRange(x, min, max) {
    return (x - min) * (x - max) <= 0;
}
function execAll(text, regex) {
    var list = [];
    var ex;
    while ((ex = regex.exec(text))) {
        list.push(ex);
    }
    return list;
}
/**
 * parse markdown message to valid entities array.
 * you can escape the markdown format using backslash (\) <br/>
 * Valid Escape : <br/>
 * [text]\\(link) <br/>
 * \\` \\** \\``` \\|| \\-- \\~~ \\__ <br/>
 * @param {String} text - input markdown text.
 */
function parse(text) {
    var e_1, _a, e_2, _b;
    if (text == '')
        return [text, []];
    var delims = [];
    // getting all delims
    for (var key in DEFAULT_DELIMITERS) {
        delims.push(key);
    }
    var i = 0;
    var tmp = new Map();
    var xe = new Set();
    var entities = [];
    // check if delims is escape or not.
    var igr = function (index) { return index > -1 && text[index - 1] == '\\' && text[index] !== '\\'; };
    try {
        // convert the LINK_FORMAT to entities
        for (var _c = __values(execAll(text, LINK_REGEX)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var match = _d.value;
            var _e = __read(match, 3), full = _e[0], text_url = _e[1], url = _e[2];
            if (text_url) {
                if (url.startsWith('mailto:')) {
                    url = url.slice('mailto:'.length, url.length);
                    entities.push(new Entities_1.Entities({
                        offset: Number(match.index),
                        length: url.length,
                        type: 'email',
                        IEntities: true,
                    }));
                }
                else if (/tg:\/\/user\?id=(\d+)/gi.test(url)) {
                    var mention = /tg:\/\/user\?id=(\d+)/gi.exec(url);
                    if (mention == null)
                        continue;
                    entities.push(new Entities_1.Entities({
                        offset: Number(match.index),
                        length: text_url.length,
                        type: 'mentionName',
                        userId: BigInt(String(mention[1])),
                        IEntities: true,
                    }));
                }
                else {
                    entities.push(new Entities_1.Entities({
                        offset: Number(match.index),
                        length: text_url.length,
                        type: 'textUrl',
                        url: url,
                        IEntities: true,
                    }));
                }
                text =
                    text.substring(-1, Number(match.index)) +
                        text.substring(Number(match.index)).replace(full, text_url);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        // convert the LINK_ESC_REGEX to LINK_REGEX
        for (var _f = __values(execAll(text, LINK_ESC_REGEX)), _g = _f.next(); !_g.done; _g = _f.next()) {
            var match = _g.value;
            var _h = __read(match, 3), full = _h[0], text_url = _h[1], url = _h[2];
            text =
                text.substring(-1, Number(match.index)) +
                    text.substring(Number(match.index)).replace(full, "[".concat(text_url, "](").concat(url, ")"));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
        }
        finally { if (e_2) throw e_2.error; }
    }
    while (i < text.length) {
        var index = -1;
        var delim = '';
        for (var de in DEFAULT_DELIMITERS) {
            var dei = text.indexOf(de, i);
            if (dei > -1 && (index == -1 || dei < index)) {
                index = dei;
                delim = de;
            }
        }
        if (index == -1 || delim == '' || delim == undefined)
            break;
        if (!igr(index)) {
            if (xe.has(delim)) {
                var cv = tmp.get(delim);
                xe.delete(delim);
                tmp.delete(delim);
                if (cv) {
                    var m = __assign({}, cv);
                    m.length = index - cv.offset;
                    if (m.type !== 'pre')
                        delete m.language;
                    entities.push(new Entities_1.Entities(m));
                }
            }
            else {
                xe.add(delim);
                tmp.set(delim, {
                    offset: index,
                    length: -1,
                    language: '',
                    type: DEFAULT_DELIMITERS[delim],
                    IEntities: true,
                });
            }
            text = text.substring(-1, index) + text.substring(index).replace(delim, '');
        }
        else {
            xe.delete(delim);
            tmp.delete(delim);
            delim = '';
            text = text.substring(-1, index - 1) + text.substring(index - 1).replace('\\', ''); //text.replace("\\","")
            index++;
        }
        i = index;
    }
    // short from low offset
    entities.sort(function (a, b) {
        return a.offset - b.offset;
    });
    // remove any entities if it inside code-style.
    for (var im = 0; im < entities.length; im++) {
        var em = entities[im];
        var pm = entities[im - 1];
        var nm = entities[im + 1];
        if (nm) {
            if (inRange(nm.offset, em.offset, em.offset + em.length)) {
                if (em.type == 'code') {
                    if (nm.type !== 'spoiler')
                        entities.splice(im + 1, 1);
                }
                else if (nm.type == 'code') {
                    if (em.type !== 'spoiler')
                        entities.splice(im, 1);
                }
            }
        }
        else if (pm) {
            if (inRange(pm.offset, em.offset, em.offset + em.length)) {
                if (em.type == 'code') {
                    if (pm.type !== 'spoiler')
                        entities.splice(im - 1, 1);
                }
                else if (pm.type == 'code') {
                    if (em.type !== 'spoiler')
                        entities.splice(im, 1);
                }
            }
        }
    }
    return [text, entities];
}
exports.parse = parse;
