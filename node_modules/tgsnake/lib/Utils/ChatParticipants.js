"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatParticipants = exports.ChatParticipantsForbidden = exports.ChatParticipantAdmin = exports.ChatParticipantCreator = exports.ChatParticipant = exports.ChannelParticipant = void 0;
var telegram_1 = require("telegram");
var From_1 = require("./From");
var Chat_1 = require("./Chat");
var AdminRights_1 = require("./AdminRights");
var BannedRight_1 = require("./BannedRight");
var GetEntity_1 = require("../Telegram/Users/GetEntity");
var ToBigInt_1 = require("./ToBigInt");
var ChannelParticipant = /** @class */ (function () {
    function ChannelParticipant() {
        this.date = Math.floor(Date.now() / 1000);
    }
    ChannelParticipant.prototype.init = function (participant, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(participant instanceof telegram_1.Api.ChannelParticipantCreator)) return [3 /*break*/, 2];
                        participant;
                        this.status = 'creator';
                        this.adminRights = new AdminRights_1.AdminRights(participant.adminRights);
                        this.user = new From_1.From();
                        return [4 /*yield*/, this.user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this];
                    case 2:
                        if (!(participant instanceof telegram_1.Api.ChannelParticipantAdmin)) return [3 /*break*/, 8];
                        participant;
                        this.status = 'admin';
                        this.adminRights = new AdminRights_1.AdminRights(participant.adminRights);
                        this.canEdit = participant.canEdit;
                        this.self = participant.self;
                        this.rank = participant.rank;
                        this.user = new From_1.From();
                        return [4 /*yield*/, this.user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient)];
                    case 3:
                        _a.sent();
                        if (!participant.inviterId) return [3 /*break*/, 5];
                        this.inviter = new From_1.From();
                        return [4 /*yield*/, this.inviter.init(BigInt((0, ToBigInt_1.toString)(participant.inviterId)), SnakeClient)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        if (!participant.promotedBy) return [3 /*break*/, 7];
                        this.promotedBy = new From_1.From();
                        return [4 /*yield*/, this.promotedBy.init(BigInt((0, ToBigInt_1.toString)(participant.promotedBy)), SnakeClient)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2 /*return*/, this];
                    case 8:
                        if (!(participant instanceof telegram_1.Api.ChannelParticipantBanned)) return [3 /*break*/, 12];
                        participant;
                        this.status = 'banned';
                        this.bannedRights = new BannedRight_1.BannedRights(participant.bannedRights);
                        if (!participant.left) {
                            this.status = 'restricted';
                        }
                        this.user = new From_1.From();
                        //@ts-ignore
                        return [4 /*yield*/, this.user.init(BigInt((0, ToBigInt_1.toString)(participant.peer.userId)), SnakeClient)];
                    case 9:
                        //@ts-ignore
                        _a.sent();
                        if (!participant.kickedBy) return [3 /*break*/, 11];
                        this.kickedBy = new From_1.From();
                        return [4 /*yield*/, this.kickedBy.init(BigInt((0, ToBigInt_1.toString)(participant.kickedBy)), SnakeClient)];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11: return [2 /*return*/, this];
                    case 12:
                        if (!(participant instanceof telegram_1.Api.ChannelParticipantLeft)) return [3 /*break*/, 14];
                        participant;
                        this.status = 'left';
                        this.user = new From_1.From();
                        //@ts-ignore
                        return [4 /*yield*/, this.user.init(BigInt((0, ToBigInt_1.toString)(participant.peer.userId)), SnakeClient)];
                    case 13:
                        //@ts-ignore
                        _a.sent();
                        return [2 /*return*/, this];
                    case 14:
                        if (!(participant instanceof telegram_1.Api.ChannelParticipantSelf)) return [3 /*break*/, 18];
                        participant;
                        this.status = 'self';
                        this.user = new From_1.From();
                        return [4 /*yield*/, this.user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient)];
                    case 15:
                        _a.sent();
                        if (!participant.inviterId) return [3 /*break*/, 17];
                        this.inviter = new From_1.From();
                        return [4 /*yield*/, this.inviter.init(BigInt((0, ToBigInt_1.toString)(participant.inviterId)), SnakeClient)];
                    case 16:
                        _a.sent();
                        _a.label = 17;
                    case 17: return [2 /*return*/, this];
                    case 18:
                        if (!(participant instanceof telegram_1.Api.ChannelParticipant)) return [3 /*break*/, 20];
                        participant;
                        this.status = 'member';
                        this.user = new From_1.From();
                        return [4 /*yield*/, this.user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient)];
                    case 19:
                        _a.sent();
                        return [2 /*return*/, this];
                    case 20: return [2 /*return*/];
                }
            });
        });
    };
    return ChannelParticipant;
}());
exports.ChannelParticipant = ChannelParticipant;
var ChatParticipant = /** @class */ (function () {
    function ChatParticipant() {
        this.status = 'member';
    }
    ChatParticipant.prototype.init = function (participant, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var user, inviter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.date = participant.date;
                        if (!participant.userId) return [3 /*break*/, 2];
                        user = new From_1.From();
                        return [4 /*yield*/, user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient)];
                    case 1:
                        _a.sent();
                        this.user = user;
                        _a.label = 2;
                    case 2:
                        if (!participant.inviterId) return [3 /*break*/, 4];
                        inviter = new From_1.From();
                        return [4 /*yield*/, inviter.init(BigInt((0, ToBigInt_1.toString)(participant.inviterId)), SnakeClient)];
                    case 3:
                        _a.sent();
                        this.inviter = inviter;
                        _a.label = 4;
                    case 4: return [2 /*return*/, this];
                }
            });
        });
    };
    return ChatParticipant;
}());
exports.ChatParticipant = ChatParticipant;
var ChatParticipantCreator = /** @class */ (function () {
    function ChatParticipantCreator() {
        this.status = 'creator';
    }
    ChatParticipantCreator.prototype.init = function (participant, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!participant.userId) return [3 /*break*/, 2];
                        user = new From_1.From();
                        return [4 /*yield*/, user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient)];
                    case 1:
                        _a.sent();
                        this.user = user;
                        _a.label = 2;
                    case 2: return [2 /*return*/, this];
                }
            });
        });
    };
    return ChatParticipantCreator;
}());
exports.ChatParticipantCreator = ChatParticipantCreator;
var ChatParticipantAdmin = /** @class */ (function () {
    function ChatParticipantAdmin() {
        this.status = 'admin';
    }
    ChatParticipantAdmin.prototype.init = function (participant, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var user, inviter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.date = participant.date;
                        if (!participant.userId) return [3 /*break*/, 2];
                        user = new From_1.From();
                        return [4 /*yield*/, user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient)];
                    case 1:
                        _a.sent();
                        this.user = user;
                        _a.label = 2;
                    case 2:
                        if (!participant.inviterId) return [3 /*break*/, 4];
                        inviter = new From_1.From();
                        return [4 /*yield*/, inviter.init(BigInt((0, ToBigInt_1.toString)(participant.inviterId)), SnakeClient)];
                    case 3:
                        _a.sent();
                        this.inviter = inviter;
                        _a.label = 4;
                    case 4: return [2 /*return*/, this];
                }
            });
        });
    };
    return ChatParticipantAdmin;
}());
exports.ChatParticipantAdmin = ChatParticipantAdmin;
var ChatParticipantsForbidden = /** @class */ (function () {
    function ChatParticipantsForbidden() {
        this.status = 'forbidden';
    }
    ChatParticipantsForbidden.prototype.init = function (participant, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var chat, selfParticipant, selfParticipant, selfParticipant;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!participant.chatId) return [3 /*break*/, 2];
                        chat = new Chat_1.Chat();
                        return [4 /*yield*/, chat.init(BigInt((0, ToBigInt_1.toString)(participant.chatId)), SnakeClient)];
                    case 1:
                        _a.sent();
                        this.chat = chat;
                        _a.label = 2;
                    case 2:
                        if (!participant.selfParticipant) return [3 /*break*/, 8];
                        if (!(participant.selfParticipant instanceof telegram_1.Api.ChatParticipant)) return [3 /*break*/, 4];
                        selfParticipant = new ChatParticipant();
                        return [4 /*yield*/, selfParticipant.init(participant.selfParticipant, SnakeClient)];
                    case 3:
                        _a.sent();
                        this.selfParticipant = selfParticipant;
                        _a.label = 4;
                    case 4:
                        if (!(participant.selfParticipant instanceof telegram_1.Api.ChatParticipantCreator)) return [3 /*break*/, 6];
                        selfParticipant = new ChatParticipantCreator();
                        return [4 /*yield*/, selfParticipant.init(participant.selfParticipant, SnakeClient)];
                    case 5:
                        _a.sent();
                        this.selfParticipant = selfParticipant;
                        _a.label = 6;
                    case 6:
                        if (!(participant.selfParticipant instanceof telegram_1.Api.ChatParticipantAdmin)) return [3 /*break*/, 8];
                        selfParticipant = new ChatParticipantAdmin();
                        return [4 /*yield*/, selfParticipant.init(participant.selfParticipant, SnakeClient)];
                    case 7:
                        _a.sent();
                        this.selfParticipant = selfParticipant;
                        _a.label = 8;
                    case 8: return [2 /*return*/, this];
                }
            });
        });
    };
    return ChatParticipantsForbidden;
}());
exports.ChatParticipantsForbidden = ChatParticipantsForbidden;
var ChatParticipants = /** @class */ (function () {
    function ChatParticipants() {
    }
    ChatParticipants.prototype.init = function (participant, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var mode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mode = ['debug', 'info'];
                        if (mode.includes(SnakeClient.logger)) {
                            SnakeClient.log("[".concat(SnakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Creating ChatParticipants"));
                        }
                        if (!(participant instanceof telegram_1.Api.ChatParticipants)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._ChatParticipants(participant, SnakeClient)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(participant instanceof telegram_1.Api.channels.ChannelParticipants)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._ChannelParticipants(participant, SnakeClient)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(participant instanceof telegram_1.Api.channels.ChannelParticipant)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this._ChannelParticipant(participant, SnakeClient)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ChatParticipants.prototype._ChatParticipants = function (participant, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var chat, participants, temp, i, item, selfParticipant, selfParticipant, selfParticipant;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.version = participant.version;
                        if (!participant.chatId) return [3 /*break*/, 2];
                        chat = new Chat_1.Chat();
                        return [4 /*yield*/, chat.init(BigInt((0, ToBigInt_1.toString)(participant.chatId)), SnakeClient)];
                    case 1:
                        _a.sent();
                        this.chat = chat;
                        _a.label = 2;
                    case 2:
                        if (!participant.participants) return [3 /*break*/, 10];
                        participants = participant.participants;
                        temp = [];
                        this.count = participants.length;
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!true) return [3 /*break*/, 10];
                        item = participants[i];
                        if (!(item instanceof telegram_1.Api.ChatParticipant)) return [3 /*break*/, 5];
                        selfParticipant = new ChatParticipant();
                        return [4 /*yield*/, selfParticipant.init(item, SnakeClient)];
                    case 4:
                        _a.sent();
                        temp.push(selfParticipant);
                        _a.label = 5;
                    case 5:
                        if (!(item instanceof telegram_1.Api.ChatParticipantCreator)) return [3 /*break*/, 7];
                        selfParticipant = new ChatParticipantCreator();
                        return [4 /*yield*/, selfParticipant.init(item, SnakeClient)];
                    case 6:
                        _a.sent();
                        temp.push(selfParticipant);
                        _a.label = 7;
                    case 7:
                        if (!(item instanceof telegram_1.Api.ChatParticipantAdmin)) return [3 /*break*/, 9];
                        selfParticipant = new ChatParticipantAdmin();
                        return [4 /*yield*/, selfParticipant.init(item, SnakeClient)];
                    case 8:
                        _a.sent();
                        temp.push(selfParticipant);
                        _a.label = 9;
                    case 9:
                        if (temp.length >= participants.length) {
                            this.participants = temp;
                            return [2 /*return*/, this];
                        }
                        i++;
                        return [3 /*break*/, 3];
                    case 10: return [2 /*return*/, this];
                }
            });
        });
    };
    ChatParticipants.prototype._ChannelParticipants = function (participant, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var participants, temp, i, item, channelPart;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //@ts-ignore
                        this.count = participant.count || participant.participants.length;
                        participants = participant.participants;
                        temp = [];
                        //@ts-ignore
                        participant.users.map(function (item) {
                            var entity = new GetEntity_1.ResultGetEntity(item);
                            SnakeClient.entityCache.set(entity.id, entity);
                            if (entity.username)
                                SnakeClient.entityCache.set(entity.username, entity);
                        });
                        //@ts-ignore
                        participant.chats.map(function (item) {
                            if (item instanceof telegram_1.Api.Chat) {
                                item;
                            }
                            else {
                                item;
                            }
                            var entity = new GetEntity_1.ResultGetEntity(item);
                            SnakeClient.entityCache.set(entity.id, entity);
                            if (entity.username)
                                SnakeClient.entityCache.set(entity.username, entity);
                        });
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        item = participants[i];
                        channelPart = new ChannelParticipant();
                        return [4 /*yield*/, channelPart.init(item, SnakeClient)];
                    case 2:
                        _a.sent();
                        temp.push(channelPart);
                        if (temp.length >= participants.length) {
                            this.participants = temp;
                            return [2 /*return*/, this];
                        }
                        i++;
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ChatParticipants.prototype._ChannelParticipant = function (participant, SnakeClient) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var participants, temp, channelPart;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        //@ts-ignore
                        this.count = participant.count || ((_a = participant.participants) === null || _a === void 0 ? void 0 : _a.length) || 1;
                        participants = participant.participant;
                        temp = [];
                        //@ts-ignore
                        participant.users.map(function (item) {
                            var entity = new GetEntity_1.ResultGetEntity(item);
                            SnakeClient.entityCache.set(entity.id, entity);
                            if (entity.username)
                                SnakeClient.entityCache.set(entity.username, entity);
                        });
                        //@ts-ignore
                        participant.chats.map(function (item) {
                            if (item instanceof telegram_1.Api.Chat) {
                                item;
                            }
                            else {
                                item;
                            }
                            var entity = new GetEntity_1.ResultGetEntity(item);
                            SnakeClient.entityCache.set(entity.id, entity);
                            if (entity.username)
                                SnakeClient.entityCache.set(entity.username, entity);
                        });
                        channelPart = new ChannelParticipant();
                        return [4 /*yield*/, channelPart.init(participants, SnakeClient)];
                    case 1:
                        _b.sent();
                        temp.push(channelPart);
                        this.participants = temp;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    return ChatParticipants;
}());
exports.ChatParticipants = ChatParticipants;
