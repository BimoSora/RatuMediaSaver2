"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.From = void 0;
var telegram_1 = require("telegram");
var ToBigInt_1 = require("./ToBigInt");
var big_integer_1 = require("big-integer");
var CleanObject_1 = require("./CleanObject");
var From = /** @class */ (function () {
    function From() {
    }
    From.prototype.init = function (peer, snakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var id, mode, entity;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof peer !== 'number' && typeof peer !== 'bigint' && typeof peer !== 'string') {
                            if (peer instanceof telegram_1.Api.PeerUser) {
                                peer;
                                if ((0, big_integer_1.isInstance)(peer.userId)) {
                                    //@ts-ignore
                                    id = BigInt((0, ToBigInt_1.toString)(peer.userId));
                                }
                                else {
                                    //@ts-ignore
                                    id = BigInt(peer.userId);
                                }
                            }
                            if (peer instanceof telegram_1.Api.PeerChat) {
                                peer;
                                if ((0, big_integer_1.isInstance)(peer.chatId)) {
                                    //@ts-ignore
                                    id = BigInt(Number("-".concat((0, ToBigInt_1.toString)(peer.chatId))));
                                }
                                else {
                                    //@ts-ignore
                                    id = BigInt(Number("-".concat(peer.chatId)));
                                }
                            }
                            if (peer instanceof telegram_1.Api.PeerChannel) {
                                peer;
                                if ((0, big_integer_1.isInstance)(peer.channelId)) {
                                    //@ts-ignore
                                    id = BigInt(Number("-100".concat((0, ToBigInt_1.toString)(peer.channelId))));
                                }
                                else {
                                    //@ts-ignore
                                    id = BigInt(Number("-100".concat(peer.channelId)));
                                }
                            }
                        }
                        else {
                            id = typeof peer == 'number' ? BigInt(peer) : peer;
                        }
                        if (!id) return [3 /*break*/, 2];
                        mode = ['debug', 'info'];
                        if (mode.includes(snakeClient.logger)) {
                            snakeClient.log("[".concat(snakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Creating chat ").concat(id));
                        }
                        return [4 /*yield*/, snakeClient.telegram.getEntity(id, true)];
                    case 1:
                        entity = _a.sent();
                        this.id = entity.id;
                        this.username = entity.username;
                        this.firstName = entity.firstName;
                        this.lastName = entity.lastName;
                        this.status = entity.status;
                        this.self = entity.self;
                        this.deleted = entity.deleted;
                        this.fake = entity.fake;
                        this.scam = entity.scam;
                        this.bot = entity.bot;
                        this.verified = entity.verified;
                        this.restricted = entity.restricted;
                        this.dcId = entity.dcId;
                        this.photo = entity.photo;
                        this.restrictionReason = entity.restrictionReason;
                        _a.label = 2;
                    case 2: return [4 /*yield*/, (0, CleanObject_1.Cleaning)(this)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    return From;
}());
exports.From = From;
