"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseMessage = void 0;
var Entities_1 = require("./Entities");
var messageParse_1 = require("telegram/client/messageParse");
function toHTML(str) {
    while (true) {
        var regex = /(\[(?<text>[^\[\]]*)\]\((?<url>.*?)\))/gm;
        var match = regex.exec(str);
        if (!match) {
            break;
        }
        var _a = JSON.parse(JSON.stringify(match.groups)), text = _a.text, url = _a.url;
        if (text && url) {
            str = str.replace("[".concat(text, "](").concat(url, ")"), "<a href=\"".concat(url, "\">").concat(text, "</a>"));
        }
    }
    return str;
}
function ParseMessage(SnakeClient, text, parseMode, entities) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, c, e, d, _b, f, g;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (parseMode == '')
                        return [2 /*return*/, [text, []]];
                    return [4 /*yield*/, (0, messageParse_1._parseMessageText)(SnakeClient.client, text, parseMode)];
                case 1:
                    _a = __read.apply(void 0, [_c.sent(), 2]), c = _a[0], e = _a[1];
                    if (!(parseMode == 'markdown')) return [3 /*break*/, 4];
                    return [4 /*yield*/, toHTML(c)];
                case 2:
                    d = _c.sent();
                    return [4 /*yield*/, (0, messageParse_1._parseMessageText)(SnakeClient.client, d.replace(/\<(\/)?([^a])\>/gim, '').trim(), 'html')];
                case 3:
                    _b = __read.apply(void 0, [_c.sent(), 2]), f = _b[0], g = _b[1];
                    c = f;
                    e = __spreadArray(__spreadArray([], __read(e), false), __read(g), false);
                    _c.label = 4;
                case 4:
                    if (!entities) return [3 /*break*/, 6];
                    return [4 /*yield*/, (0, Entities_1.ParseEntities)(entities)];
                case 5:
                    e = _c.sent();
                    c = text;
                    _c.label = 6;
                case 6:
                    if (!c)
                        c = text;
                    if (!e)
                        e = [];
                    return [2 /*return*/, [c, e]];
            }
        });
    });
}
exports.ParseMessage = ParseMessage;
