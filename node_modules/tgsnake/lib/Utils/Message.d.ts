import { Api } from 'telegram';
import { Snake } from '../client';
import { RestrictionReason } from './RestrictionReason';
import { BigInteger } from 'big-integer';
import { MessageAction } from './MessageAction';
import { Chat } from './Chat';
import { From } from './From';
import { ReplyToMessageContext } from '../Context/ReplyToMessageContext';
import { Entities } from '@tgsnake/parser';
import { ForwardMessage } from './ForwardMessage';
import { Media } from './Media';
import { Telegram } from '../Telegram';
import { TypeReplyMarkup } from './ReplyMarkup';
export declare class Message {
    out?: boolean;
    mentioned?: boolean;
    mediaUnread?: boolean;
    silent?: boolean;
    post?: boolean;
    legacy?: boolean;
    id: number;
    from: From;
    chat: Chat;
    replyToMessage?: ReplyToMessageContext;
    date?: number | Date;
    action?: MessageAction;
    ttlPeriod?: number;
    fromScheduled?: boolean;
    editHide?: boolean;
    pinned?: boolean;
    fwdFrom?: ForwardMessage;
    viaBotId?: bigint;
    text?: string;
    media?: Media;
    replyMarkup?: TypeReplyMarkup;
    entities?: Entities[];
    views?: number;
    forwards?: number;
    replies?: Api.TypeMessageReplies | number;
    editDate?: number;
    postAuthor?: string;
    mediaGroupId?: BigInteger | number;
    restrictionReason?: RestrictionReason[];
    noforward?: boolean;
    senderChat?: Chat;
    isAutomaticForward?: boolean;
    constructor();
    init(message: Api.MessageService | Api.Message, SnakeClient: Snake): Promise<this | undefined>;
    private parseMessageService;
    private parseMessage;
    get SnakeClient(): Snake;
    get telegram(): Telegram;
    set telegram(_tg: Telegram);
    set SnakeClient(_snake: Snake);
}
