"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Media = exports.generateFileId = exports.thumbTypeId = exports.typeId = void 0;
var telegram_1 = require("telegram");
var tg_file_id_1 = require("tg-file-id");
var ToBigInt_1 = require("./ToBigInt");
exports.typeId = {
    THUMBNAIL: 0,
    CHAT_PHOTO: 1,
    PHOTO: 2,
    VOICE: 3,
    VIDEO: 4,
    DOCUMENT: 5,
    ENCRYPTED: 6,
    TEMP: 7,
    STICKER: 8,
    AUDIO: 9,
    ANIMATION: 10,
    ENCRYPTED_THUMBNAIL: 11,
    WALLPAPER: 12,
    VIDEO_NOTE: 13,
    SECURE_RAW: 14,
    SECURE: 15,
    BACKGROUND: 16,
    DOCUMENT_AS_FILE: 17,
};
exports.thumbTypeId = {
    LEGACY: 0,
    THUMBNAIL: 1,
    CHAT_PHOTO_SMALL: 2,
    CHAT_PHOTO_BIG: 3,
    STICKER_SET_THUMBNAIL: 4,
};
function generateFileId(medias) {
    var e_1, _a;
    var file = new tg_file_id_1.FileId();
    try {
        for (var _b = __values(Object.entries(medias)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            if (key == 'id' ||
                key == 'accessHash' ||
                key == 'secret' ||
                key == 'dialogAccessHash' ||
                key == 'volumeId' ||
                key == 'dialogId' ||
                key == 'stickerSetId' ||
                key == 'stickerSetAccessHash') {
                if (BigInt(String(value)) < BigInt(0)) {
                    var num = String(value).replace(/^\-/, ''); // generate positive number
                    file[key] = BigInt(num);
                    continue;
                }
                else {
                    file[key] = BigInt(String(value));
                    continue;
                }
            }
            else {
                file[key] = value;
                continue;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var file_id = file.toFileId();
    var unfId = file.toFileUniqId();
    return {
        fileId: file_id,
        uniqueFileId: unfId,
    };
}
exports.generateFileId = generateFileId;
var Media = /** @class */ (function () {
    function Media() {
    }
    Media.prototype.stickerToFileId = function (doc) {
        var data = {
            version: 4,
            subVersion: 30,
            dcId: doc.dcId,
            fileType: 'sticker',
            id: BigInt(String(doc.id)),
            accessHash: BigInt(String(doc.accessHash)),
            typeId: exports.typeId.STICKER,
            fileReference: doc.fileReference.toString('hex'),
            photoSizeSource: 'stickerSetThumbnail',
            thumbTypeId: exports.thumbTypeId.STICKER_SET_THUMBNAIL,
            stickerSetId: 0,
            stickerSetAccessHash: 0,
            volumeId: 1,
        };
        for (var i = 0; i < doc.attributes.length; i++) {
            if (doc.attributes[i] instanceof telegram_1.Api.DocumentAttributeFilename) {
                var daf = doc.attributes[i];
                this.fileName = daf.fileName;
            }
            if (doc.attributes[i] instanceof telegram_1.Api.DocumentAttributeSticker) {
                var s = doc.attributes[i];
                if (s.alt !== '') {
                    this.emoji = s.alt;
                }
                if (s.stickerset instanceof telegram_1.Api.InputStickerSetID) {
                    var setId = s.stickerset;
                    (data.stickerSetId = Number(setId.id)),
                        (data.stickerSetAccessHash = Number(setId.accessHash));
                }
            }
            if (doc.attributes[i] instanceof telegram_1.Api.DocumentAttributeImageSize) {
                var size = doc.attributes[i];
                this.width = size.w;
                this.height = size.h;
            }
        }
        var file = generateFileId(data);
        this.isAnimated = Boolean(doc.mimeType == 'application/x-tgsticker');
        this.fileId = file.fileId;
        this.uniqueFileId = file.uniqueFileId;
        this.dcId = doc.dcId;
        this.size = doc.size;
        return this;
    };
    Media.prototype.photoToFileId = function (photo) {
        var data = {
            id: BigInt(String(photo.id)),
            accessHash: BigInt(String(photo.accessHash)),
            version: 4,
            subVersion: 30,
            volumeId: 1,
            localId: 0,
            fileReference: photo.fileReference.toString('hex'),
            fileType: 'photo',
            typeId: exports.typeId.PHOTO,
            thumbTypeId: exports.thumbTypeId.THUMBNAIL,
            thumbType: 'THUMBNAIL',
            photoSizeSource: 'thumbnail',
            photoSizeSourceId: exports.thumbTypeId.THUMBNAIL,
            dcId: photo.dcId,
        };
        this.type = 'photo';
        for (var i = 0; i < photo.sizes.length; i++) {
            if (photo.sizes[i] instanceof telegram_1.Api.PhotoSizeProgressive) {
                var size = photo.sizes[i];
                this.size = size.sizes[size.sizes.length - 1];
                this.width = size.w;
                this.height = size.h;
                break;
            }
        }
        this.dcId = photo.dcId;
        var file = generateFileId(data);
        this.fileId = file.fileId;
        this.uniqueFileId = file.uniqueFileId;
        return this;
    };
    Media.prototype.formatPoll = function (poll) {
        this.closed = poll.closed || false;
        this.publicVoters = poll.publicVoters || false;
        this.multipleChoice = poll.multipleChoice || false;
        this.quiz = poll.quiz || false;
        this.question = poll.question;
        this.type = 'poll';
        var asn = [];
        for (var i = 0; i < poll.answers.length; i++) {
            var cc = poll.answers[i];
            asn.push(cc.text);
        }
        this.answers = asn;
        return this;
    };
    Media.prototype.contact = function (contact) {
        this.type = 'contact';
        this.phoneNumber = contact.phoneNumber;
        this.firstName = contact.firstName;
        this.lastName = contact.lastName;
        this.vcard = contact.vcard;
        this.userId = BigInt((0, ToBigInt_1.toString)(contact.userId));
        return this;
    };
    Media.prototype.encode = function (media) {
        // document
        if (media instanceof telegram_1.Api.Document) {
            var doc = media;
            switch (doc.mimeType) {
                case 'image/webp':
                case 'application/x-tgsticker':
                    this.type = 'sticker';
                    return this.stickerToFileId(doc);
                    break;
                default:
            }
        }
        // photo
        if (media instanceof telegram_1.Api.Photo) {
            var photo = media;
            return this.photoToFileId(photo);
        }
        // Dice
        if (media instanceof telegram_1.Api.MessageMediaDice) {
            this.emoji = media.emoticon;
            this.value = media.value;
            this.type = 'dice';
        }
        // Poll
        if (media instanceof telegram_1.Api.Poll) {
            return this.formatPoll(media);
        }
        // Geo
        if (media instanceof telegram_1.Api.GeoPoint) {
            var loc = media;
            this.type = 'location';
            this.latitude = loc.lat;
            this.longitude = loc.long;
        }
        // contact
        if (media instanceof telegram_1.Api.MessageMediaContact) {
            return this.contact(media);
        }
        return this;
    };
    Media.prototype.decode = function (fileId) {
        var file = fileId || this.fileId;
        if (!file)
            return "FileId not found!";
        return (0, tg_file_id_1.decodeFileId)(String(file));
    };
    Media.prototype.parseMedia = function (media) {
        //console.log(JSON.stringify(media, null, 2));
        if (media instanceof telegram_1.Api.MessageMediaDocument) {
            if (media.document instanceof telegram_1.Api.Document) {
                return media.document;
            }
        }
        if (media instanceof telegram_1.Api.MessageMediaPhoto) {
            if (media.photo instanceof telegram_1.Api.Photo) {
                return media.photo;
            }
        }
        if (media instanceof telegram_1.Api.MessageMediaDice) {
            return media;
        }
        if (media instanceof telegram_1.Api.MessageMediaPoll) {
            return media.poll;
        }
        if (media instanceof telegram_1.Api.MessageMediaGeo) {
            return media.geo;
        }
        if (media instanceof telegram_1.Api.MessageMediaContact) {
            return media;
        }
    };
    return Media;
}());
exports.Media = Media;
