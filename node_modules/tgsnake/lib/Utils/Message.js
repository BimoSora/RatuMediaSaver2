"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
var telegram_1 = require("telegram");
var RestrictionReason_1 = require("./RestrictionReason");
var MessageAction_1 = require("./MessageAction");
var Chat_1 = require("./Chat");
var From_1 = require("./From");
var ReplyToMessageContext_1 = require("../Context/ReplyToMessageContext");
var parser_1 = __importDefault(require("@tgsnake/parser"));
var ForwardMessage_1 = require("./ForwardMessage");
var Media_1 = require("./Media");
var ReplyMarkup_1 = require("./ReplyMarkup");
var ToBigInt_1 = require("./ToBigInt");
var CleanObject_1 = require("./CleanObject");
var parser = new parser_1.default(telegram_1.Api);
var _SnakeClient;
var _telegram;
var Message = /** @class */ (function () {
    function Message() {
    }
    Message.prototype.init = function (message, SnakeClient) {
        return __awaiter(this, void 0, void 0, function () {
            var mode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mode = ['debug', 'info'];
                        if (mode.includes(SnakeClient.logger)) {
                            SnakeClient.log("[".concat(SnakeClient.connectTime, "] - [").concat(new Date().toLocaleString(), "] - Creating message"));
                        }
                        _SnakeClient = SnakeClient;
                        _telegram = SnakeClient.telegram;
                        if (!(message instanceof telegram_1.Api.Message)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.parseMessage(message)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(message instanceof telegram_1.Api.MessageService)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.parseMessageService(message)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // only parse Message Service
    Message.prototype.parseMessageService = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var messageAction, from, from, chat, chat, replyTo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.out = message.out;
                        this.mentioned = message.mentioned;
                        this.mediaUnread = message.mediaUnread;
                        this.silent = message.silent;
                        this.legacy = message.legacy;
                        this.id = message.id;
                        this.date = message.date;
                        this.post = message.post;
                        //@ts-ignore
                        this.noforward = message.noforwards;
                        messageAction = new MessageAction_1.MessageAction();
                        return [4 /*yield*/, messageAction.init(message.action)];
                    case 1:
                        _a.sent();
                        this.action = messageAction;
                        this.ttlPeriod = message.ttlPeriod;
                        if (!message.fromId) return [3 /*break*/, 11];
                        from = new From_1.From();
                        if (!message.out) return [3 /*break*/, 3];
                        return [4 /*yield*/, from.init(this.SnakeClient.aboutMe.id, this.SnakeClient)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 10];
                    case 3:
                        if (!(message.fromId instanceof telegram_1.Api.PeerChannel)) return [3 /*break*/, 6];
                        this.isAutomaticForward = false;
                        this.senderChat = new Chat_1.Chat();
                        return [4 /*yield*/, from.init('@Channel_Bot', this.SnakeClient)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.senderChat.init(message.fromId, this.SnakeClient)];
                    case 5:
                        _a.sent();
                        if (message.fwdFrom) {
                            if (message.fwdFrom.savedFromPeer) {
                                this.isAutomaticForward = true;
                            }
                        }
                        return [3 /*break*/, 10];
                    case 6:
                        if (!(message.fromId instanceof telegram_1.Api.PeerChat)) return [3 /*break*/, 8];
                        return [4 /*yield*/, from.init('@GroupAnonymousBot', this.SnakeClient)];
                    case 7:
                        _a.sent();
                        return [3 /*break*/, 10];
                    case 8:
                        if (!(message.fromId instanceof telegram_1.Api.PeerUser)) return [3 /*break*/, 10];
                        return [4 /*yield*/, from.init(message.fromId, this.SnakeClient)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10:
                        this.from = from;
                        return [3 /*break*/, 19];
                    case 11:
                        if (!message.peerId) return [3 /*break*/, 19];
                        from = new From_1.From();
                        if (!message.out) return [3 /*break*/, 13];
                        return [4 /*yield*/, from.init(this.SnakeClient.aboutMe.id, this.SnakeClient)];
                    case 12:
                        _a.sent();
                        return [3 /*break*/, 18];
                    case 13:
                        if (!(message.peerId instanceof telegram_1.Api.PeerUser)) return [3 /*break*/, 15];
                        return [4 /*yield*/, from.init(message.peerId, this.SnakeClient)];
                    case 14:
                        _a.sent();
                        return [3 /*break*/, 18];
                    case 15:
                        if (!(message.peerId instanceof telegram_1.Api.PeerChannel ||
                            message.peerId instanceof telegram_1.Api.PeerChat)) return [3 /*break*/, 18];
                        return [4 /*yield*/, from.init('@GroupAnonymousBot', this.SnakeClient)];
                    case 16:
                        _a.sent();
                        if (!!this.senderChat) return [3 /*break*/, 18];
                        this.senderChat = new Chat_1.Chat();
                        return [4 /*yield*/, this.senderChat.init(message.peerId, this.SnakeClient)];
                    case 17:
                        _a.sent();
                        _a.label = 18;
                    case 18:
                        this.from = from;
                        _a.label = 19;
                    case 19:
                        if (!message.peerId) return [3 /*break*/, 21];
                        chat = new Chat_1.Chat();
                        return [4 /*yield*/, chat.init(message.peerId, this.SnakeClient)];
                    case 20:
                        _a.sent();
                        this.chat = chat;
                        return [3 /*break*/, 23];
                    case 21:
                        if (!message.fromId) return [3 /*break*/, 23];
                        chat = new Chat_1.Chat();
                        return [4 /*yield*/, chat.init(message.fromId, this.SnakeClient)];
                    case 22:
                        _a.sent();
                        this.chat = chat;
                        _a.label = 23;
                    case 23:
                        if (!message.replyTo) return [3 /*break*/, 25];
                        replyTo = new ReplyToMessageContext_1.ReplyToMessageContext();
                        return [4 /*yield*/, replyTo.init(message.replyTo, this.SnakeClient, this.chat.id)];
                    case 24:
                        _a.sent();
                        this.replyToMessage = replyTo;
                        _a.label = 25;
                    case 25: return [4 /*yield*/, (0, CleanObject_1.Cleaning)(this)];
                    case 26:
                        _a.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    // only parse Message
    Message.prototype.parseMessage = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var from, from, chat, chat, media, _a, _b, replyTo, forward, temp, i, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.out = message.out;
                        this.mentioned = message.mentioned;
                        this.mediaUnread = message.mediaUnread;
                        this.silent = message.silent;
                        this.legacy = message.legacy;
                        this.id = message.id;
                        this.date = message.date;
                        this.post = message.post;
                        this.fromScheduled = message.fromScheduled;
                        this.editHide = message.editHide;
                        this.pinned = message.pinned;
                        //@ts-ignore
                        this.noforward = message.noforwards;
                        this.viaBotId =
                            message.viaBotId !== null || message.viaBotId !== undefined
                                ? BigInt((0, ToBigInt_1.toString)(message.viaBotId))
                                : BigInt(0);
                        this.text = message.message;
                        this.views = message.views;
                        this.forwards = message.forwards;
                        this.postAuthor = message.postAuthor;
                        this.mediaGroupId = message.groupedId;
                        this.ttlPeriod = message.ttlPeriod;
                        this.editDate = message.editDate;
                        if (!message.fromId) return [3 /*break*/, 10];
                        from = new From_1.From();
                        if (!message.out) return [3 /*break*/, 2];
                        return [4 /*yield*/, from.init(this.SnakeClient.aboutMe.id, this.SnakeClient)];
                    case 1:
                        _d.sent();
                        return [3 /*break*/, 9];
                    case 2:
                        if (!(message.fromId instanceof telegram_1.Api.PeerChannel)) return [3 /*break*/, 5];
                        this.isAutomaticForward = false;
                        this.senderChat = new Chat_1.Chat();
                        return [4 /*yield*/, from.init('@Channel_Bot', this.SnakeClient)];
                    case 3:
                        _d.sent();
                        return [4 /*yield*/, this.senderChat.init(message.fromId, this.SnakeClient)];
                    case 4:
                        _d.sent();
                        if (message.fwdFrom) {
                            if (message.fwdFrom.savedFromPeer) {
                                this.isAutomaticForward = true;
                            }
                        }
                        return [3 /*break*/, 9];
                    case 5:
                        if (!(message.fromId instanceof telegram_1.Api.PeerChat)) return [3 /*break*/, 7];
                        return [4 /*yield*/, from.init('@GroupAnonymousBot', this.SnakeClient)];
                    case 6:
                        _d.sent();
                        return [3 /*break*/, 9];
                    case 7:
                        if (!(message.fromId instanceof telegram_1.Api.PeerUser)) return [3 /*break*/, 9];
                        return [4 /*yield*/, from.init(message.fromId, this.SnakeClient)];
                    case 8:
                        _d.sent();
                        _d.label = 9;
                    case 9:
                        this.from = from;
                        return [3 /*break*/, 18];
                    case 10:
                        if (!message.peerId) return [3 /*break*/, 18];
                        from = new From_1.From();
                        if (!message.out) return [3 /*break*/, 12];
                        return [4 /*yield*/, from.init(this.SnakeClient.aboutMe.id, this.SnakeClient)];
                    case 11:
                        _d.sent();
                        return [3 /*break*/, 17];
                    case 12:
                        if (!(message.peerId instanceof telegram_1.Api.PeerUser)) return [3 /*break*/, 14];
                        return [4 /*yield*/, from.init(message.peerId, this.SnakeClient)];
                    case 13:
                        _d.sent();
                        return [3 /*break*/, 17];
                    case 14:
                        if (!(message.peerId instanceof telegram_1.Api.PeerChannel ||
                            message.peerId instanceof telegram_1.Api.PeerChat)) return [3 /*break*/, 17];
                        return [4 /*yield*/, from.init('@GroupAnonymousBot', this.SnakeClient)];
                    case 15:
                        _d.sent();
                        if (!!this.senderChat) return [3 /*break*/, 17];
                        this.senderChat = new Chat_1.Chat();
                        return [4 /*yield*/, this.senderChat.init(message.peerId, this.SnakeClient)];
                    case 16:
                        _d.sent();
                        _d.label = 17;
                    case 17:
                        this.from = from;
                        _d.label = 18;
                    case 18:
                        if (!message.peerId) return [3 /*break*/, 20];
                        chat = new Chat_1.Chat();
                        return [4 /*yield*/, chat.init(message.peerId, this.SnakeClient)];
                    case 19:
                        _d.sent();
                        this.chat = chat;
                        return [3 /*break*/, 22];
                    case 20:
                        if (!message.fromId) return [3 /*break*/, 22];
                        chat = new Chat_1.Chat();
                        return [4 /*yield*/, chat.init(message.fromId, this.SnakeClient)];
                    case 21:
                        _d.sent();
                        this.chat = chat;
                        _d.label = 22;
                    case 22:
                        if (!message.media) return [3 /*break*/, 25];
                        media = new Media_1.Media();
                        _b = (_a = media).encode;
                        return [4 /*yield*/, media.parseMedia(message.media)];
                    case 23: return [4 /*yield*/, _b.apply(_a, [_d.sent()])];
                    case 24:
                        _d.sent();
                        this.media = media;
                        _d.label = 25;
                    case 25:
                        if (!message.replyTo) return [3 /*break*/, 27];
                        replyTo = new ReplyToMessageContext_1.ReplyToMessageContext();
                        return [4 /*yield*/, replyTo.init(message.replyTo, this.SnakeClient, this.chat.id)];
                    case 26:
                        _d.sent();
                        this.replyToMessage = replyTo;
                        _d.label = 27;
                    case 27:
                        if (!message.fwdFrom) return [3 /*break*/, 29];
                        forward = new ForwardMessage_1.ForwardMessage();
                        return [4 /*yield*/, forward.init(message.fwdFrom, this.SnakeClient)];
                    case 28:
                        _d.sent();
                        this.fwdFrom = forward;
                        _d.label = 29;
                    case 29:
                        if (message.entities) {
                            this.entities = parser.fromRaw(message.entities);
                        }
                        if (message.restrictionReason) {
                            temp = [];
                            for (i = 0; i < message.restrictionReason.length; i++) {
                                temp.push(new RestrictionReason_1.RestrictionReason(message.restrictionReason[i]));
                            }
                            this.restrictionReason = temp;
                        }
                        if (!message.replyMarkup) return [3 /*break*/, 31];
                        _c = this;
                        return [4 /*yield*/, (0, ReplyMarkup_1.convertReplyMarkup)(message.replyMarkup, this.SnakeClient)];
                    case 30:
                        _c.replyMarkup = _d.sent();
                        _d.label = 31;
                    case 31:
                        if (message.replies) {
                            this.replies = message.replies;
                        }
                        return [4 /*yield*/, (0, CleanObject_1.Cleaning)(this)];
                    case 32:
                        _d.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Object.defineProperty(Message.prototype, "SnakeClient", {
        get: function () {
            return _SnakeClient;
        },
        set: function (_snake) {
            _SnakeClient = _snake;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "telegram", {
        get: function () {
            return _telegram;
        },
        set: function (_tg) {
            _telegram = _tg;
        },
        enumerable: false,
        configurable: true
    });
    return Message;
}());
exports.Message = Message;
