"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertReplyMarkup = exports.BuildReplyMarkup = void 0;
var telegram_1 = require("telegram");
var big_integer_1 = __importDefault(require("big-integer"));
function BuildReplyMarkup(replyMarkup) {
    // inlineKeyboard
    if ('inlineKeyboard' in replyMarkup) {
        return replyMarkupInlineKeyboard(replyMarkup);
    }
    // keyboard
    if ('keyboard' in replyMarkup) {
        return replyMarkupKeyboard(replyMarkup);
    }
    // removeKeyboard
    if ('removeKeyboard' in replyMarkup) {
        return replyMarkupRemoveKeyboard(replyMarkup);
    }
    // forceReply
    if ('forceReply' in replyMarkup) {
        return replyMarkupForceReply(replyMarkup);
    }
}
exports.BuildReplyMarkup = BuildReplyMarkup;
function replyMarkupInlineKeyboard(replyMarkup) {
    var _a, _b, _c, _d, _e;
    var rows = [];
    for (var row = 0; row < replyMarkup.inlineKeyboard.length; row++) {
        var tempCol = [];
        for (var col = 0; col < replyMarkup.inlineKeyboard[row].length; col++) {
            var btn = replyMarkup.inlineKeyboard[row][col];
            // button url
            if (btn.url) {
                tempCol.push(new telegram_1.Api.KeyboardButtonUrl({
                    text: String(btn.text),
                    url: String(btn.url),
                }));
                continue;
            }
            // button login url
            if (btn.loginUrl) {
                tempCol.push(new telegram_1.Api.InputKeyboardButtonUrlAuth({
                    text: String(btn.text),
                    requestWriteAccess: ((_a = btn.loginUrl) === null || _a === void 0 ? void 0 : _a.requestWriteAccess) || true,
                    fwdText: ((_b = btn.loginUrl) === null || _b === void 0 ? void 0 : _b.forwardText) || String(btn.text),
                    url: String((_c = btn.loginUrl) === null || _c === void 0 ? void 0 : _c.url),
                    bot: new telegram_1.Api.InputUser({
                        userId: (0, big_integer_1.default)((_d = btn.loginUrl) === null || _d === void 0 ? void 0 : _d.bot.id),
                        accessHash: (0, big_integer_1.default)((_e = btn.loginUrl) === null || _e === void 0 ? void 0 : _e.bot.accessHash),
                    }),
                }));
                continue;
            }
            // button callbackData
            if (btn.callbackData) {
                tempCol.push(new telegram_1.Api.KeyboardButtonCallback({
                    text: String(btn.text),
                    requiresPassword: false,
                    data: Buffer.from(String(btn.callbackData)),
                }));
                continue;
            }
            // button switch inline query
            if (btn.switchInlineQuery) {
                tempCol.push(new telegram_1.Api.KeyboardButtonSwitchInline({
                    text: String(btn.text),
                    samePeer: false,
                    query: String(btn.switchInlineQuery),
                }));
                continue;
            }
            // button switch inline query current peer
            if (btn.switchInlineQueryCurrentChat) {
                tempCol.push(new telegram_1.Api.KeyboardButtonSwitchInline({
                    text: String(btn.text),
                    samePeer: true,
                    query: String(btn.switchInlineQueryCurrentChat),
                }));
                continue;
            }
            // button game
            if (btn.callbackGame) {
                tempCol.push(new telegram_1.Api.KeyboardButtonGame({
                    text: String(btn.text),
                }));
                continue;
            }
            // button buy
            if (btn.buy) {
                tempCol.push(new telegram_1.Api.KeyboardButtonBuy({
                    text: String(btn.text),
                }));
                continue;
            }
        }
        rows.push(new telegram_1.Api.KeyboardButtonRow({
            buttons: tempCol,
        }));
    }
    return new telegram_1.Api.ReplyInlineMarkup({
        rows: rows,
    });
}
function replyMarkupKeyboard(replyMarkup) {
    var rows = [];
    for (var row = 0; row < replyMarkup.keyboard.length; row++) {
        var tempCol = [];
        for (var col = 0; col < replyMarkup.keyboard[row].length; col++) {
            // if string[][]
            if (typeof replyMarkup.keyboard[row][col] == 'string') {
                tempCol.push(new telegram_1.Api.KeyboardButton({
                    text: String(replyMarkup.keyboard[row][col]),
                }));
                continue;
            }
            if (typeof replyMarkup.keyboard[row][col] !== 'string') {
                var btn = replyMarkup.keyboard[row][col];
                // keyboard requestContact
                if (btn.requestContact) {
                    tempCol.push(new telegram_1.Api.KeyboardButtonRequestPhone({
                        text: String(btn.text),
                    }));
                    continue;
                }
                //keyboard requestLocation
                if (btn.requestLocation) {
                    tempCol.push(new telegram_1.Api.KeyboardButtonRequestGeoLocation({
                        text: String(btn.text),
                    }));
                    continue;
                }
                //keyboard requestPoll
                if (btn.requestPoll) {
                    tempCol.push(new telegram_1.Api.KeyboardButtonRequestPoll({
                        text: String(btn.text),
                        quiz: Boolean(btn.requestPoll.toLowerCase() == 'quiz'),
                    }));
                    continue;
                }
                // keyboard text
                if (btn.text) {
                    if (!btn.requestPoll && !btn.requestLocation && !btn.requestContact) {
                        tempCol.push(new telegram_1.Api.KeyboardButton({
                            text: String(btn.text),
                        }));
                        continue;
                    }
                }
            }
        }
        rows.push(new telegram_1.Api.KeyboardButtonRow({
            buttons: tempCol,
        }));
    }
    return new telegram_1.Api.ReplyKeyboardMarkup({
        rows: rows,
        resize: replyMarkup.resizeKeyboard || undefined,
        singleUse: replyMarkup.oneTimeKeyboard || undefined,
        placeholder: replyMarkup.inputFieldPlaceholder || undefined,
        selective: replyMarkup.selective || undefined,
    });
}
function replyMarkupRemoveKeyboard(replyMarkup) {
    return new telegram_1.Api.ReplyKeyboardHide({
        selective: replyMarkup.selective || undefined,
    });
}
function replyMarkupForceReply(replyMarkup) {
    return new telegram_1.Api.ReplyKeyboardForceReply({
        singleUse: replyMarkup.singleUse || undefined,
        selective: replyMarkup.selective || undefined,
        placeholder: replyMarkup.inputFieldPlaceholder || undefined,
    });
}
function convertReplyMarkup(replyMarkup, SnakeClient) {
    return __awaiter(this, void 0, void 0, function () {
        var markup, markup, rows, i, col, btns, j, btn, cc, cc, cc, cc, markup, rows, i, col, btns, j, btn, cc, me, ee, dd, cc, cc, cc, cc, cc, cc, markup;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // force reply
                    if (replyMarkup instanceof telegram_1.Api.ReplyKeyboardForceReply) {
                        replyMarkup;
                        markup = {
                            forceReply: true,
                            selective: replyMarkup.selective || undefined,
                            singleUse: replyMarkup.singleUse || undefined,
                            inputFieldPlaceholder: replyMarkup.placeholder || undefined,
                        };
                        return [2 /*return*/, markup];
                    }
                    // removeKeyboard
                    if (replyMarkup instanceof telegram_1.Api.ReplyKeyboardHide) {
                        replyMarkup;
                        markup = {
                            removeKeyboard: true,
                            selective: replyMarkup.selective || undefined,
                        };
                    }
                    // KeyboardButton
                    if (replyMarkup instanceof telegram_1.Api.ReplyKeyboardMarkup) {
                        replyMarkup;
                        rows = [];
                        for (i = 0; i < replyMarkup.rows.length; i++) {
                            col = [];
                            btns = replyMarkup.rows[i];
                            for (j = 0; j < btns.buttons.length; j++) {
                                btn = btns.buttons[j];
                                if (btn instanceof telegram_1.Api.KeyboardButton) {
                                    btn;
                                    cc = {
                                        text: btn.text,
                                    };
                                    col.push(cc);
                                }
                                if (btn instanceof telegram_1.Api.KeyboardButtonRequestPhone) {
                                    btn;
                                    cc = {
                                        text: btn.text,
                                        requestContact: true,
                                    };
                                    col.push(cc);
                                }
                                if (btn instanceof telegram_1.Api.KeyboardButtonRequestGeoLocation) {
                                    btn;
                                    cc = {
                                        text: btn.text,
                                        requestLocation: true,
                                    };
                                    col.push(cc);
                                }
                                if (btn instanceof telegram_1.Api.KeyboardButtonRequestPoll) {
                                    btn;
                                    cc = {
                                        text: btn.text,
                                        requestPoll: btn.quiz ? 'quiz' : 'regular',
                                    };
                                    col.push(cc);
                                }
                            }
                            rows.push(col);
                        }
                        markup = {
                            keyboard: rows,
                            resizeKeyboard: replyMarkup.resize || undefined,
                            oneTimeKeyboard: replyMarkup.singleUse || undefined,
                            inputFieldPlaceholder: replyMarkup.placeholder || undefined,
                            selective: replyMarkup.selective || undefined,
                        };
                        return [2 /*return*/, markup];
                    }
                    if (!(replyMarkup instanceof telegram_1.Api.ReplyInlineMarkup)) return [3 /*break*/, 9];
                    replyMarkup;
                    rows = [];
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < replyMarkup.rows.length)) return [3 /*break*/, 8];
                    col = [];
                    btns = replyMarkup.rows[i];
                    j = 0;
                    _a.label = 2;
                case 2:
                    if (!(j < btns.buttons.length)) return [3 /*break*/, 6];
                    btn = btns.buttons[j];
                    if (btn instanceof telegram_1.Api.KeyboardButtonUrl) {
                        btn;
                        cc = {
                            text: btn.text,
                            url: btn.url,
                        };
                        col.push(cc);
                    }
                    if (!(btn instanceof telegram_1.Api.KeyboardButtonUrlAuth)) return [3 /*break*/, 4];
                    btn;
                    return [4 /*yield*/, SnakeClient.telegram.getMe()];
                case 3:
                    me = _a.sent();
                    ee = {
                        id: me.id,
                        accessHash: me.accessHash,
                    };
                    dd = {
                        requestWriteAccess: true,
                        forwardText: btn.fwdText || String(btn.text),
                        url: String(btn.url),
                        bot: ee,
                    };
                    cc = {
                        loginUrl: dd,
                        text: btn.text,
                    };
                    col.push(cc);
                    _a.label = 4;
                case 4:
                    if (btn instanceof telegram_1.Api.KeyboardButtonCallback) {
                        btn;
                        cc = {
                            text: btn.text,
                            callbackData: btn.data.toString('utf8'),
                        };
                        col.push(cc);
                    }
                    if (btn instanceof telegram_1.Api.KeyboardButtonSwitchInline) {
                        btn;
                        if (btn.samePeer) {
                            cc = {
                                text: btn.text,
                                switchInlineQueryCurrentChat: btn.query,
                            };
                            col.push(cc);
                        }
                        else {
                            cc = {
                                text: btn.text,
                                switchInlineQuery: btn.query,
                            };
                            col.push(cc);
                        }
                    }
                    if (btn instanceof telegram_1.Api.KeyboardButtonGame) {
                        btn;
                        cc = {
                            text: btn.text,
                            callbackGame: btn.text,
                        };
                        col.push(cc);
                    }
                    if (btn instanceof telegram_1.Api.KeyboardButtonBuy) {
                        btn;
                        cc = {
                            text: btn.text,
                            buy: btn.text,
                        };
                        col.push(cc);
                    }
                    _a.label = 5;
                case 5:
                    j++;
                    return [3 /*break*/, 2];
                case 6:
                    rows.push(col);
                    _a.label = 7;
                case 7:
                    i++;
                    return [3 /*break*/, 1];
                case 8:
                    markup = {
                        inlineKeyboard: rows,
                    };
                    return [2 /*return*/, markup];
                case 9: return [2 /*return*/];
            }
        });
    });
}
exports.convertReplyMarkup = convertReplyMarkup;
