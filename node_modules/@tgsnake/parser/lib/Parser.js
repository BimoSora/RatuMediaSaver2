"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var Entities_1 = require("./Entities");
var markdown_1 = require("./markdown");
var html_1 = require("./html");
var ParserError_1 = __importDefault(require("./ParserError"));
var big_integer_1 = __importDefault(require("big-integer"));
var Parser = /** @class */ (function () {
    function Parser(api) {
        this.raw = api;
    }
    /**
     * Extract entities from text.
     * @param {String} text - input text.
     * @param {String} parseMode - parseMode
     */
    Parser.prototype.parse = function (text, parseMode) {
        try {
            if (text === "") {
                return [text, []];
            }
            if (parseMode === "markdown") {
                return (0, markdown_1.parse)(text);
            }
            if (parseMode === "html") {
                return (0, html_1.parse)(text);
            }
            return [text, []];
        }
        catch (error) {
            throw new ParserError_1.default(error.message, "Parser error when parsing message.", 500, "Parser.parse");
        }
    };
    /**
     * converting raw entities to tgsnake entities.
     * @param {Object} entities - input raw entities
     */
    Parser.prototype.fromRaw = function (entities) {
        var e_1, _a;
        if (!this.raw) {
            throw new ParserError_1.default("Raw not found!", "Plase make sure you set the raw. eg : new Parser(raw).", 404, "Parser.fromRaw");
        }
        var tmp = [];
        var raw = this.raw;
        try {
            for (var entities_1 = __values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                var ent = entities_1_1.value;
                if (ent instanceof raw.MessageEntityMention) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "mention",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityHashtag) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "hashtag",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityBotCommand) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "botCommand",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityUrl) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "url",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityEmail) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "email",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityBold) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "bold",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityItalic) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "italic",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityCode) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "code",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityPre) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        language: ent.language,
                        type: "pre",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityTextUrl) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        url: ent.url,
                        type: "textUrl",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityMentionName) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        userId: BigInt(String(ent.userId)),
                        type: "mentionName",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityPhone) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "phone",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityCashtag) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "cashtag",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityUnderline) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "underline",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityStrike) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "strike",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityBlockquote) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "blockquote",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityBankCard) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "bankCard",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntitySpoiler) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "spoiler",
                    }));
                    continue;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return tmp;
    };
    /**
     * converting tgsnake entities to raw entities.
     * @param {Object} entities - input tgsnake entities
     */
    Parser.prototype.toRaw = function (entities) {
        var e_2, _a;
        if (!this.raw) {
            throw new ParserError_1.default("Raw not found!", "Plase make sure you set the raw. eg : new Parser(raw).", 404, "Parser.fromRaw");
        }
        var tmp = [];
        var raw = this.raw;
        try {
            for (var entities_2 = __values(entities), entities_2_1 = entities_2.next(); !entities_2_1.done; entities_2_1 = entities_2.next()) {
                var ent = entities_2_1.value;
                switch (ent.type) {
                    case "mention":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityMention({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "hashtag":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityHashtag({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "botCommand":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityBotCommand({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "url":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityMention({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "email":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityEmail({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "bold":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityBold({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "italic":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityItalic({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "code":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityCode({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "pre":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityPre({
                            offset: ent.offset,
                            length: ent.length,
                            language: ent.language,
                        }));
                        break;
                    case "textUrl":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityTextUrl({
                            offset: ent.offset,
                            length: ent.length,
                            url: ent.url,
                        }));
                        break;
                    case "mentionName":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityMentionName({
                            offset: ent.offset,
                            length: ent.length,
                            userId: (0, big_integer_1.default)(String(ent.userId)),
                        }));
                        break;
                    case "phone":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityPhone({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "cashtag":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityCashtag({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "underline":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityUnderline({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "strike":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityStrike({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "blockquote":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityBlockquote({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "bankCard":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityBankCard({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    case "spoiler":
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntitySpoiler({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        break;
                    default:
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (entities_2_1 && !entities_2_1.done && (_a = entities_2.return)) _a.call(entities_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return tmp;
    };
    return Parser;
}());
exports.Parser = Parser;
